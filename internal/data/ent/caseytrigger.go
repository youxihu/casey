// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/youxihu/casey/internal/data/ent/caseytrigger"
)

// CaseyTrigger is the model entity for the CaseyTrigger schema.
type CaseyTrigger struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Executor holds the value of the "executor" field.
	Executor string `json:"executor,omitempty"`
	// Hostname holds the value of the "hostname" field.
	Hostname string `json:"hostname,omitempty"`
	// Command holds the value of the "command" field.
	Command string `json:"command,omitempty"`
	// Response holds the value of the "response" field.
	Response string `json:"response,omitempty"`
	// ExecutedAt holds the value of the "executed_at" field.
	ExecutedAt   time.Time `json:"executed_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CaseyTrigger) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case caseytrigger.FieldID:
			values[i] = new(sql.NullInt64)
		case caseytrigger.FieldExecutor, caseytrigger.FieldHostname, caseytrigger.FieldCommand, caseytrigger.FieldResponse:
			values[i] = new(sql.NullString)
		case caseytrigger.FieldExecutedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CaseyTrigger fields.
func (ct *CaseyTrigger) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case caseytrigger.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ct.ID = int64(value.Int64)
		case caseytrigger.FieldExecutor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field executor", values[i])
			} else if value.Valid {
				ct.Executor = value.String
			}
		case caseytrigger.FieldHostname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hostname", values[i])
			} else if value.Valid {
				ct.Hostname = value.String
			}
		case caseytrigger.FieldCommand:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field command", values[i])
			} else if value.Valid {
				ct.Command = value.String
			}
		case caseytrigger.FieldResponse:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field response", values[i])
			} else if value.Valid {
				ct.Response = value.String
			}
		case caseytrigger.FieldExecutedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field executed_at", values[i])
			} else if value.Valid {
				ct.ExecutedAt = value.Time
			}
		default:
			ct.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CaseyTrigger.
// This includes values selected through modifiers, order, etc.
func (ct *CaseyTrigger) Value(name string) (ent.Value, error) {
	return ct.selectValues.Get(name)
}

// Update returns a builder for updating this CaseyTrigger.
// Note that you need to call CaseyTrigger.Unwrap() before calling this method if this CaseyTrigger
// was returned from a transaction, and the transaction was committed or rolled back.
func (ct *CaseyTrigger) Update() *CaseyTriggerUpdateOne {
	return NewCaseyTriggerClient(ct.config).UpdateOne(ct)
}

// Unwrap unwraps the CaseyTrigger entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ct *CaseyTrigger) Unwrap() *CaseyTrigger {
	_tx, ok := ct.config.driver.(*txDriver)
	if !ok {
		panic("ent: CaseyTrigger is not a transactional entity")
	}
	ct.config.driver = _tx.drv
	return ct
}

// String implements the fmt.Stringer.
func (ct *CaseyTrigger) String() string {
	var builder strings.Builder
	builder.WriteString("CaseyTrigger(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ct.ID))
	builder.WriteString("executor=")
	builder.WriteString(ct.Executor)
	builder.WriteString(", ")
	builder.WriteString("hostname=")
	builder.WriteString(ct.Hostname)
	builder.WriteString(", ")
	builder.WriteString("command=")
	builder.WriteString(ct.Command)
	builder.WriteString(", ")
	builder.WriteString("response=")
	builder.WriteString(ct.Response)
	builder.WriteString(", ")
	builder.WriteString("executed_at=")
	builder.WriteString(ct.ExecutedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CaseyTriggers is a parsable slice of CaseyTrigger.
type CaseyTriggers []*CaseyTrigger
