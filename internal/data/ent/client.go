// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/youxihu/casey/internal/data/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"github.com/youxihu/casey/internal/data/ent/caseyinspections"
	"github.com/youxihu/casey/internal/data/ent/caseytrigger"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// CaseyInspections is the client for interacting with the CaseyInspections builders.
	CaseyInspections *CaseyInspectionsClient
	// CaseyTrigger is the client for interacting with the CaseyTrigger builders.
	CaseyTrigger *CaseyTriggerClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.CaseyInspections = NewCaseyInspectionsClient(c.config)
	c.CaseyTrigger = NewCaseyTriggerClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		CaseyInspections: NewCaseyInspectionsClient(cfg),
		CaseyTrigger:     NewCaseyTriggerClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		CaseyInspections: NewCaseyInspectionsClient(cfg),
		CaseyTrigger:     NewCaseyTriggerClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		CaseyInspections.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.CaseyInspections.Use(hooks...)
	c.CaseyTrigger.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.CaseyInspections.Intercept(interceptors...)
	c.CaseyTrigger.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *CaseyInspectionsMutation:
		return c.CaseyInspections.mutate(ctx, m)
	case *CaseyTriggerMutation:
		return c.CaseyTrigger.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// CaseyInspectionsClient is a client for the CaseyInspections schema.
type CaseyInspectionsClient struct {
	config
}

// NewCaseyInspectionsClient returns a client for the CaseyInspections from the given config.
func NewCaseyInspectionsClient(c config) *CaseyInspectionsClient {
	return &CaseyInspectionsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `caseyinspections.Hooks(f(g(h())))`.
func (c *CaseyInspectionsClient) Use(hooks ...Hook) {
	c.hooks.CaseyInspections = append(c.hooks.CaseyInspections, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `caseyinspections.Intercept(f(g(h())))`.
func (c *CaseyInspectionsClient) Intercept(interceptors ...Interceptor) {
	c.inters.CaseyInspections = append(c.inters.CaseyInspections, interceptors...)
}

// Create returns a builder for creating a CaseyInspections entity.
func (c *CaseyInspectionsClient) Create() *CaseyInspectionsCreate {
	mutation := newCaseyInspectionsMutation(c.config, OpCreate)
	return &CaseyInspectionsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CaseyInspections entities.
func (c *CaseyInspectionsClient) CreateBulk(builders ...*CaseyInspectionsCreate) *CaseyInspectionsCreateBulk {
	return &CaseyInspectionsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CaseyInspectionsClient) MapCreateBulk(slice any, setFunc func(*CaseyInspectionsCreate, int)) *CaseyInspectionsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CaseyInspectionsCreateBulk{err: fmt.Errorf("calling to CaseyInspectionsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CaseyInspectionsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CaseyInspectionsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CaseyInspections.
func (c *CaseyInspectionsClient) Update() *CaseyInspectionsUpdate {
	mutation := newCaseyInspectionsMutation(c.config, OpUpdate)
	return &CaseyInspectionsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CaseyInspectionsClient) UpdateOne(ci *CaseyInspections) *CaseyInspectionsUpdateOne {
	mutation := newCaseyInspectionsMutation(c.config, OpUpdateOne, withCaseyInspections(ci))
	return &CaseyInspectionsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CaseyInspectionsClient) UpdateOneID(id int64) *CaseyInspectionsUpdateOne {
	mutation := newCaseyInspectionsMutation(c.config, OpUpdateOne, withCaseyInspectionsID(id))
	return &CaseyInspectionsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CaseyInspections.
func (c *CaseyInspectionsClient) Delete() *CaseyInspectionsDelete {
	mutation := newCaseyInspectionsMutation(c.config, OpDelete)
	return &CaseyInspectionsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CaseyInspectionsClient) DeleteOne(ci *CaseyInspections) *CaseyInspectionsDeleteOne {
	return c.DeleteOneID(ci.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CaseyInspectionsClient) DeleteOneID(id int64) *CaseyInspectionsDeleteOne {
	builder := c.Delete().Where(caseyinspections.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CaseyInspectionsDeleteOne{builder}
}

// Query returns a query builder for CaseyInspections.
func (c *CaseyInspectionsClient) Query() *CaseyInspectionsQuery {
	return &CaseyInspectionsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCaseyInspections},
		inters: c.Interceptors(),
	}
}

// Get returns a CaseyInspections entity by its id.
func (c *CaseyInspectionsClient) Get(ctx context.Context, id int64) (*CaseyInspections, error) {
	return c.Query().Where(caseyinspections.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CaseyInspectionsClient) GetX(ctx context.Context, id int64) *CaseyInspections {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CaseyInspectionsClient) Hooks() []Hook {
	return c.hooks.CaseyInspections
}

// Interceptors returns the client interceptors.
func (c *CaseyInspectionsClient) Interceptors() []Interceptor {
	return c.inters.CaseyInspections
}

func (c *CaseyInspectionsClient) mutate(ctx context.Context, m *CaseyInspectionsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CaseyInspectionsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CaseyInspectionsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CaseyInspectionsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CaseyInspectionsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CaseyInspections mutation op: %q", m.Op())
	}
}

// CaseyTriggerClient is a client for the CaseyTrigger schema.
type CaseyTriggerClient struct {
	config
}

// NewCaseyTriggerClient returns a client for the CaseyTrigger from the given config.
func NewCaseyTriggerClient(c config) *CaseyTriggerClient {
	return &CaseyTriggerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `caseytrigger.Hooks(f(g(h())))`.
func (c *CaseyTriggerClient) Use(hooks ...Hook) {
	c.hooks.CaseyTrigger = append(c.hooks.CaseyTrigger, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `caseytrigger.Intercept(f(g(h())))`.
func (c *CaseyTriggerClient) Intercept(interceptors ...Interceptor) {
	c.inters.CaseyTrigger = append(c.inters.CaseyTrigger, interceptors...)
}

// Create returns a builder for creating a CaseyTrigger entity.
func (c *CaseyTriggerClient) Create() *CaseyTriggerCreate {
	mutation := newCaseyTriggerMutation(c.config, OpCreate)
	return &CaseyTriggerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CaseyTrigger entities.
func (c *CaseyTriggerClient) CreateBulk(builders ...*CaseyTriggerCreate) *CaseyTriggerCreateBulk {
	return &CaseyTriggerCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CaseyTriggerClient) MapCreateBulk(slice any, setFunc func(*CaseyTriggerCreate, int)) *CaseyTriggerCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CaseyTriggerCreateBulk{err: fmt.Errorf("calling to CaseyTriggerClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CaseyTriggerCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CaseyTriggerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CaseyTrigger.
func (c *CaseyTriggerClient) Update() *CaseyTriggerUpdate {
	mutation := newCaseyTriggerMutation(c.config, OpUpdate)
	return &CaseyTriggerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CaseyTriggerClient) UpdateOne(ct *CaseyTrigger) *CaseyTriggerUpdateOne {
	mutation := newCaseyTriggerMutation(c.config, OpUpdateOne, withCaseyTrigger(ct))
	return &CaseyTriggerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CaseyTriggerClient) UpdateOneID(id int64) *CaseyTriggerUpdateOne {
	mutation := newCaseyTriggerMutation(c.config, OpUpdateOne, withCaseyTriggerID(id))
	return &CaseyTriggerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CaseyTrigger.
func (c *CaseyTriggerClient) Delete() *CaseyTriggerDelete {
	mutation := newCaseyTriggerMutation(c.config, OpDelete)
	return &CaseyTriggerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CaseyTriggerClient) DeleteOne(ct *CaseyTrigger) *CaseyTriggerDeleteOne {
	return c.DeleteOneID(ct.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CaseyTriggerClient) DeleteOneID(id int64) *CaseyTriggerDeleteOne {
	builder := c.Delete().Where(caseytrigger.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CaseyTriggerDeleteOne{builder}
}

// Query returns a query builder for CaseyTrigger.
func (c *CaseyTriggerClient) Query() *CaseyTriggerQuery {
	return &CaseyTriggerQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCaseyTrigger},
		inters: c.Interceptors(),
	}
}

// Get returns a CaseyTrigger entity by its id.
func (c *CaseyTriggerClient) Get(ctx context.Context, id int64) (*CaseyTrigger, error) {
	return c.Query().Where(caseytrigger.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CaseyTriggerClient) GetX(ctx context.Context, id int64) *CaseyTrigger {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CaseyTriggerClient) Hooks() []Hook {
	return c.hooks.CaseyTrigger
}

// Interceptors returns the client interceptors.
func (c *CaseyTriggerClient) Interceptors() []Interceptor {
	return c.inters.CaseyTrigger
}

func (c *CaseyTriggerClient) mutate(ctx context.Context, m *CaseyTriggerMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CaseyTriggerCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CaseyTriggerUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CaseyTriggerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CaseyTriggerDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CaseyTrigger mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		CaseyInspections, CaseyTrigger []ent.Hook
	}
	inters struct {
		CaseyInspections, CaseyTrigger []ent.Interceptor
	}
)
