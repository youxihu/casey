// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/youxihu/casey/internal/data/ent/caseytrigger"
)

// CaseyTriggerCreate is the builder for creating a CaseyTrigger entity.
type CaseyTriggerCreate struct {
	config
	mutation *CaseyTriggerMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetExecutor sets the "executor" field.
func (ctc *CaseyTriggerCreate) SetExecutor(s string) *CaseyTriggerCreate {
	ctc.mutation.SetExecutor(s)
	return ctc
}

// SetHostname sets the "hostname" field.
func (ctc *CaseyTriggerCreate) SetHostname(s string) *CaseyTriggerCreate {
	ctc.mutation.SetHostname(s)
	return ctc
}

// SetCommand sets the "command" field.
func (ctc *CaseyTriggerCreate) SetCommand(s string) *CaseyTriggerCreate {
	ctc.mutation.SetCommand(s)
	return ctc
}

// SetResponse sets the "response" field.
func (ctc *CaseyTriggerCreate) SetResponse(s string) *CaseyTriggerCreate {
	ctc.mutation.SetResponse(s)
	return ctc
}

// SetNillableResponse sets the "response" field if the given value is not nil.
func (ctc *CaseyTriggerCreate) SetNillableResponse(s *string) *CaseyTriggerCreate {
	if s != nil {
		ctc.SetResponse(*s)
	}
	return ctc
}

// SetExecutedAt sets the "executed_at" field.
func (ctc *CaseyTriggerCreate) SetExecutedAt(t time.Time) *CaseyTriggerCreate {
	ctc.mutation.SetExecutedAt(t)
	return ctc
}

// SetNillableExecutedAt sets the "executed_at" field if the given value is not nil.
func (ctc *CaseyTriggerCreate) SetNillableExecutedAt(t *time.Time) *CaseyTriggerCreate {
	if t != nil {
		ctc.SetExecutedAt(*t)
	}
	return ctc
}

// SetID sets the "id" field.
func (ctc *CaseyTriggerCreate) SetID(i int64) *CaseyTriggerCreate {
	ctc.mutation.SetID(i)
	return ctc
}

// Mutation returns the CaseyTriggerMutation object of the builder.
func (ctc *CaseyTriggerCreate) Mutation() *CaseyTriggerMutation {
	return ctc.mutation
}

// Save creates the CaseyTrigger in the database.
func (ctc *CaseyTriggerCreate) Save(ctx context.Context) (*CaseyTrigger, error) {
	ctc.defaults()
	return withHooks(ctx, ctc.sqlSave, ctc.mutation, ctc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ctc *CaseyTriggerCreate) SaveX(ctx context.Context) *CaseyTrigger {
	v, err := ctc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ctc *CaseyTriggerCreate) Exec(ctx context.Context) error {
	_, err := ctc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctc *CaseyTriggerCreate) ExecX(ctx context.Context) {
	if err := ctc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ctc *CaseyTriggerCreate) defaults() {
	if _, ok := ctc.mutation.ExecutedAt(); !ok {
		v := caseytrigger.DefaultExecutedAt()
		ctc.mutation.SetExecutedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ctc *CaseyTriggerCreate) check() error {
	if _, ok := ctc.mutation.Executor(); !ok {
		return &ValidationError{Name: "executor", err: errors.New(`ent: missing required field "CaseyTrigger.executor"`)}
	}
	if _, ok := ctc.mutation.Hostname(); !ok {
		return &ValidationError{Name: "hostname", err: errors.New(`ent: missing required field "CaseyTrigger.hostname"`)}
	}
	if _, ok := ctc.mutation.Command(); !ok {
		return &ValidationError{Name: "command", err: errors.New(`ent: missing required field "CaseyTrigger.command"`)}
	}
	return nil
}

func (ctc *CaseyTriggerCreate) sqlSave(ctx context.Context) (*CaseyTrigger, error) {
	if err := ctc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ctc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ctc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	ctc.mutation.id = &_node.ID
	ctc.mutation.done = true
	return _node, nil
}

func (ctc *CaseyTriggerCreate) createSpec() (*CaseyTrigger, *sqlgraph.CreateSpec) {
	var (
		_node = &CaseyTrigger{config: ctc.config}
		_spec = sqlgraph.NewCreateSpec(caseytrigger.Table, sqlgraph.NewFieldSpec(caseytrigger.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = ctc.conflict
	if id, ok := ctc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ctc.mutation.Executor(); ok {
		_spec.SetField(caseytrigger.FieldExecutor, field.TypeString, value)
		_node.Executor = value
	}
	if value, ok := ctc.mutation.Hostname(); ok {
		_spec.SetField(caseytrigger.FieldHostname, field.TypeString, value)
		_node.Hostname = value
	}
	if value, ok := ctc.mutation.Command(); ok {
		_spec.SetField(caseytrigger.FieldCommand, field.TypeString, value)
		_node.Command = value
	}
	if value, ok := ctc.mutation.Response(); ok {
		_spec.SetField(caseytrigger.FieldResponse, field.TypeString, value)
		_node.Response = value
	}
	if value, ok := ctc.mutation.ExecutedAt(); ok {
		_spec.SetField(caseytrigger.FieldExecutedAt, field.TypeTime, value)
		_node.ExecutedAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CaseyTrigger.Create().
//		SetExecutor(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CaseyTriggerUpsert) {
//			SetExecutor(v+v).
//		}).
//		Exec(ctx)
func (ctc *CaseyTriggerCreate) OnConflict(opts ...sql.ConflictOption) *CaseyTriggerUpsertOne {
	ctc.conflict = opts
	return &CaseyTriggerUpsertOne{
		create: ctc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CaseyTrigger.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ctc *CaseyTriggerCreate) OnConflictColumns(columns ...string) *CaseyTriggerUpsertOne {
	ctc.conflict = append(ctc.conflict, sql.ConflictColumns(columns...))
	return &CaseyTriggerUpsertOne{
		create: ctc,
	}
}

type (
	// CaseyTriggerUpsertOne is the builder for "upsert"-ing
	//  one CaseyTrigger node.
	CaseyTriggerUpsertOne struct {
		create *CaseyTriggerCreate
	}

	// CaseyTriggerUpsert is the "OnConflict" setter.
	CaseyTriggerUpsert struct {
		*sql.UpdateSet
	}
)

// SetExecutor sets the "executor" field.
func (u *CaseyTriggerUpsert) SetExecutor(v string) *CaseyTriggerUpsert {
	u.Set(caseytrigger.FieldExecutor, v)
	return u
}

// UpdateExecutor sets the "executor" field to the value that was provided on create.
func (u *CaseyTriggerUpsert) UpdateExecutor() *CaseyTriggerUpsert {
	u.SetExcluded(caseytrigger.FieldExecutor)
	return u
}

// SetHostname sets the "hostname" field.
func (u *CaseyTriggerUpsert) SetHostname(v string) *CaseyTriggerUpsert {
	u.Set(caseytrigger.FieldHostname, v)
	return u
}

// UpdateHostname sets the "hostname" field to the value that was provided on create.
func (u *CaseyTriggerUpsert) UpdateHostname() *CaseyTriggerUpsert {
	u.SetExcluded(caseytrigger.FieldHostname)
	return u
}

// SetCommand sets the "command" field.
func (u *CaseyTriggerUpsert) SetCommand(v string) *CaseyTriggerUpsert {
	u.Set(caseytrigger.FieldCommand, v)
	return u
}

// UpdateCommand sets the "command" field to the value that was provided on create.
func (u *CaseyTriggerUpsert) UpdateCommand() *CaseyTriggerUpsert {
	u.SetExcluded(caseytrigger.FieldCommand)
	return u
}

// SetResponse sets the "response" field.
func (u *CaseyTriggerUpsert) SetResponse(v string) *CaseyTriggerUpsert {
	u.Set(caseytrigger.FieldResponse, v)
	return u
}

// UpdateResponse sets the "response" field to the value that was provided on create.
func (u *CaseyTriggerUpsert) UpdateResponse() *CaseyTriggerUpsert {
	u.SetExcluded(caseytrigger.FieldResponse)
	return u
}

// ClearResponse clears the value of the "response" field.
func (u *CaseyTriggerUpsert) ClearResponse() *CaseyTriggerUpsert {
	u.SetNull(caseytrigger.FieldResponse)
	return u
}

// SetExecutedAt sets the "executed_at" field.
func (u *CaseyTriggerUpsert) SetExecutedAt(v time.Time) *CaseyTriggerUpsert {
	u.Set(caseytrigger.FieldExecutedAt, v)
	return u
}

// UpdateExecutedAt sets the "executed_at" field to the value that was provided on create.
func (u *CaseyTriggerUpsert) UpdateExecutedAt() *CaseyTriggerUpsert {
	u.SetExcluded(caseytrigger.FieldExecutedAt)
	return u
}

// ClearExecutedAt clears the value of the "executed_at" field.
func (u *CaseyTriggerUpsert) ClearExecutedAt() *CaseyTriggerUpsert {
	u.SetNull(caseytrigger.FieldExecutedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CaseyTrigger.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(caseytrigger.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CaseyTriggerUpsertOne) UpdateNewValues() *CaseyTriggerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(caseytrigger.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CaseyTrigger.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CaseyTriggerUpsertOne) Ignore() *CaseyTriggerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CaseyTriggerUpsertOne) DoNothing() *CaseyTriggerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CaseyTriggerCreate.OnConflict
// documentation for more info.
func (u *CaseyTriggerUpsertOne) Update(set func(*CaseyTriggerUpsert)) *CaseyTriggerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CaseyTriggerUpsert{UpdateSet: update})
	}))
	return u
}

// SetExecutor sets the "executor" field.
func (u *CaseyTriggerUpsertOne) SetExecutor(v string) *CaseyTriggerUpsertOne {
	return u.Update(func(s *CaseyTriggerUpsert) {
		s.SetExecutor(v)
	})
}

// UpdateExecutor sets the "executor" field to the value that was provided on create.
func (u *CaseyTriggerUpsertOne) UpdateExecutor() *CaseyTriggerUpsertOne {
	return u.Update(func(s *CaseyTriggerUpsert) {
		s.UpdateExecutor()
	})
}

// SetHostname sets the "hostname" field.
func (u *CaseyTriggerUpsertOne) SetHostname(v string) *CaseyTriggerUpsertOne {
	return u.Update(func(s *CaseyTriggerUpsert) {
		s.SetHostname(v)
	})
}

// UpdateHostname sets the "hostname" field to the value that was provided on create.
func (u *CaseyTriggerUpsertOne) UpdateHostname() *CaseyTriggerUpsertOne {
	return u.Update(func(s *CaseyTriggerUpsert) {
		s.UpdateHostname()
	})
}

// SetCommand sets the "command" field.
func (u *CaseyTriggerUpsertOne) SetCommand(v string) *CaseyTriggerUpsertOne {
	return u.Update(func(s *CaseyTriggerUpsert) {
		s.SetCommand(v)
	})
}

// UpdateCommand sets the "command" field to the value that was provided on create.
func (u *CaseyTriggerUpsertOne) UpdateCommand() *CaseyTriggerUpsertOne {
	return u.Update(func(s *CaseyTriggerUpsert) {
		s.UpdateCommand()
	})
}

// SetResponse sets the "response" field.
func (u *CaseyTriggerUpsertOne) SetResponse(v string) *CaseyTriggerUpsertOne {
	return u.Update(func(s *CaseyTriggerUpsert) {
		s.SetResponse(v)
	})
}

// UpdateResponse sets the "response" field to the value that was provided on create.
func (u *CaseyTriggerUpsertOne) UpdateResponse() *CaseyTriggerUpsertOne {
	return u.Update(func(s *CaseyTriggerUpsert) {
		s.UpdateResponse()
	})
}

// ClearResponse clears the value of the "response" field.
func (u *CaseyTriggerUpsertOne) ClearResponse() *CaseyTriggerUpsertOne {
	return u.Update(func(s *CaseyTriggerUpsert) {
		s.ClearResponse()
	})
}

// SetExecutedAt sets the "executed_at" field.
func (u *CaseyTriggerUpsertOne) SetExecutedAt(v time.Time) *CaseyTriggerUpsertOne {
	return u.Update(func(s *CaseyTriggerUpsert) {
		s.SetExecutedAt(v)
	})
}

// UpdateExecutedAt sets the "executed_at" field to the value that was provided on create.
func (u *CaseyTriggerUpsertOne) UpdateExecutedAt() *CaseyTriggerUpsertOne {
	return u.Update(func(s *CaseyTriggerUpsert) {
		s.UpdateExecutedAt()
	})
}

// ClearExecutedAt clears the value of the "executed_at" field.
func (u *CaseyTriggerUpsertOne) ClearExecutedAt() *CaseyTriggerUpsertOne {
	return u.Update(func(s *CaseyTriggerUpsert) {
		s.ClearExecutedAt()
	})
}

// Exec executes the query.
func (u *CaseyTriggerUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CaseyTriggerCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CaseyTriggerUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CaseyTriggerUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CaseyTriggerUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CaseyTriggerCreateBulk is the builder for creating many CaseyTrigger entities in bulk.
type CaseyTriggerCreateBulk struct {
	config
	err      error
	builders []*CaseyTriggerCreate
	conflict []sql.ConflictOption
}

// Save creates the CaseyTrigger entities in the database.
func (ctcb *CaseyTriggerCreateBulk) Save(ctx context.Context) ([]*CaseyTrigger, error) {
	if ctcb.err != nil {
		return nil, ctcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ctcb.builders))
	nodes := make([]*CaseyTrigger, len(ctcb.builders))
	mutators := make([]Mutator, len(ctcb.builders))
	for i := range ctcb.builders {
		func(i int, root context.Context) {
			builder := ctcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CaseyTriggerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ctcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ctcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ctcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ctcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ctcb *CaseyTriggerCreateBulk) SaveX(ctx context.Context) []*CaseyTrigger {
	v, err := ctcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ctcb *CaseyTriggerCreateBulk) Exec(ctx context.Context) error {
	_, err := ctcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctcb *CaseyTriggerCreateBulk) ExecX(ctx context.Context) {
	if err := ctcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CaseyTrigger.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CaseyTriggerUpsert) {
//			SetExecutor(v+v).
//		}).
//		Exec(ctx)
func (ctcb *CaseyTriggerCreateBulk) OnConflict(opts ...sql.ConflictOption) *CaseyTriggerUpsertBulk {
	ctcb.conflict = opts
	return &CaseyTriggerUpsertBulk{
		create: ctcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CaseyTrigger.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ctcb *CaseyTriggerCreateBulk) OnConflictColumns(columns ...string) *CaseyTriggerUpsertBulk {
	ctcb.conflict = append(ctcb.conflict, sql.ConflictColumns(columns...))
	return &CaseyTriggerUpsertBulk{
		create: ctcb,
	}
}

// CaseyTriggerUpsertBulk is the builder for "upsert"-ing
// a bulk of CaseyTrigger nodes.
type CaseyTriggerUpsertBulk struct {
	create *CaseyTriggerCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CaseyTrigger.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(caseytrigger.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CaseyTriggerUpsertBulk) UpdateNewValues() *CaseyTriggerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(caseytrigger.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CaseyTrigger.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CaseyTriggerUpsertBulk) Ignore() *CaseyTriggerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CaseyTriggerUpsertBulk) DoNothing() *CaseyTriggerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CaseyTriggerCreateBulk.OnConflict
// documentation for more info.
func (u *CaseyTriggerUpsertBulk) Update(set func(*CaseyTriggerUpsert)) *CaseyTriggerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CaseyTriggerUpsert{UpdateSet: update})
	}))
	return u
}

// SetExecutor sets the "executor" field.
func (u *CaseyTriggerUpsertBulk) SetExecutor(v string) *CaseyTriggerUpsertBulk {
	return u.Update(func(s *CaseyTriggerUpsert) {
		s.SetExecutor(v)
	})
}

// UpdateExecutor sets the "executor" field to the value that was provided on create.
func (u *CaseyTriggerUpsertBulk) UpdateExecutor() *CaseyTriggerUpsertBulk {
	return u.Update(func(s *CaseyTriggerUpsert) {
		s.UpdateExecutor()
	})
}

// SetHostname sets the "hostname" field.
func (u *CaseyTriggerUpsertBulk) SetHostname(v string) *CaseyTriggerUpsertBulk {
	return u.Update(func(s *CaseyTriggerUpsert) {
		s.SetHostname(v)
	})
}

// UpdateHostname sets the "hostname" field to the value that was provided on create.
func (u *CaseyTriggerUpsertBulk) UpdateHostname() *CaseyTriggerUpsertBulk {
	return u.Update(func(s *CaseyTriggerUpsert) {
		s.UpdateHostname()
	})
}

// SetCommand sets the "command" field.
func (u *CaseyTriggerUpsertBulk) SetCommand(v string) *CaseyTriggerUpsertBulk {
	return u.Update(func(s *CaseyTriggerUpsert) {
		s.SetCommand(v)
	})
}

// UpdateCommand sets the "command" field to the value that was provided on create.
func (u *CaseyTriggerUpsertBulk) UpdateCommand() *CaseyTriggerUpsertBulk {
	return u.Update(func(s *CaseyTriggerUpsert) {
		s.UpdateCommand()
	})
}

// SetResponse sets the "response" field.
func (u *CaseyTriggerUpsertBulk) SetResponse(v string) *CaseyTriggerUpsertBulk {
	return u.Update(func(s *CaseyTriggerUpsert) {
		s.SetResponse(v)
	})
}

// UpdateResponse sets the "response" field to the value that was provided on create.
func (u *CaseyTriggerUpsertBulk) UpdateResponse() *CaseyTriggerUpsertBulk {
	return u.Update(func(s *CaseyTriggerUpsert) {
		s.UpdateResponse()
	})
}

// ClearResponse clears the value of the "response" field.
func (u *CaseyTriggerUpsertBulk) ClearResponse() *CaseyTriggerUpsertBulk {
	return u.Update(func(s *CaseyTriggerUpsert) {
		s.ClearResponse()
	})
}

// SetExecutedAt sets the "executed_at" field.
func (u *CaseyTriggerUpsertBulk) SetExecutedAt(v time.Time) *CaseyTriggerUpsertBulk {
	return u.Update(func(s *CaseyTriggerUpsert) {
		s.SetExecutedAt(v)
	})
}

// UpdateExecutedAt sets the "executed_at" field to the value that was provided on create.
func (u *CaseyTriggerUpsertBulk) UpdateExecutedAt() *CaseyTriggerUpsertBulk {
	return u.Update(func(s *CaseyTriggerUpsert) {
		s.UpdateExecutedAt()
	})
}

// ClearExecutedAt clears the value of the "executed_at" field.
func (u *CaseyTriggerUpsertBulk) ClearExecutedAt() *CaseyTriggerUpsertBulk {
	return u.Update(func(s *CaseyTriggerUpsert) {
		s.ClearExecutedAt()
	})
}

// Exec executes the query.
func (u *CaseyTriggerUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CaseyTriggerCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CaseyTriggerCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CaseyTriggerUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
