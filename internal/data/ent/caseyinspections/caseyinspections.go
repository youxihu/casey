// Code generated by ent, DO NOT EDIT.

package caseyinspections

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the caseyinspections type in the database.
	Label = "casey_inspections"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTimestamp holds the string denoting the timestamp field in the database.
	FieldTimestamp = "timestamp"
	// FieldHostname holds the string denoting the hostname field in the database.
	FieldHostname = "hostname"
	// FieldIP holds the string denoting the ip field in the database.
	FieldIP = "ip"
	// FieldOs holds the string denoting the os field in the database.
	FieldOs = "os"
	// FieldUptime holds the string denoting the uptime field in the database.
	FieldUptime = "uptime"
	// FieldCPU holds the string denoting the cpu field in the database.
	FieldCPU = "cpu"
	// FieldCPULoad holds the string denoting the cpu_load field in the database.
	FieldCPULoad = "cpu_load"
	// FieldMemory holds the string denoting the memory field in the database.
	FieldMemory = "memory"
	// FieldDisk holds the string denoting the disk field in the database.
	FieldDisk = "disk"
	// FieldDiskIo holds the string denoting the disk_io field in the database.
	FieldDiskIo = "disk_io"
	// FieldRouter holds the string denoting the router field in the database.
	FieldRouter = "router"
	// FieldNetStats holds the string denoting the net_stats field in the database.
	FieldNetStats = "net_stats"
	// FieldProcesses holds the string denoting the processes field in the database.
	FieldProcesses = "processes"
	// FieldZombieProcs holds the string denoting the zombie_procs field in the database.
	FieldZombieProcs = "zombie_procs"
	// FieldTopProcesses holds the string denoting the top_processes field in the database.
	FieldTopProcesses = "top_processes"
	// FieldEnv holds the string denoting the env field in the database.
	FieldEnv = "env"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// Table holds the table name of the caseyinspections in the database.
	Table = "casey_inspections"
)

// Columns holds all SQL columns for caseyinspections fields.
var Columns = []string{
	FieldID,
	FieldTimestamp,
	FieldHostname,
	FieldIP,
	FieldOs,
	FieldUptime,
	FieldCPU,
	FieldCPULoad,
	FieldMemory,
	FieldDisk,
	FieldDiskIo,
	FieldRouter,
	FieldNetStats,
	FieldProcesses,
	FieldZombieProcs,
	FieldTopProcesses,
	FieldEnv,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the CaseyInspections queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTimestamp orders the results by the timestamp field.
func ByTimestamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimestamp, opts...).ToFunc()
}

// ByHostname orders the results by the hostname field.
func ByHostname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHostname, opts...).ToFunc()
}

// ByIP orders the results by the ip field.
func ByIP(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIP, opts...).ToFunc()
}

// ByOs orders the results by the os field.
func ByOs(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOs, opts...).ToFunc()
}

// ByUptime orders the results by the uptime field.
func ByUptime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUptime, opts...).ToFunc()
}

// ByCPU orders the results by the cpu field.
func ByCPU(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCPU, opts...).ToFunc()
}

// ByCPULoad orders the results by the cpu_load field.
func ByCPULoad(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCPULoad, opts...).ToFunc()
}

// ByMemory orders the results by the memory field.
func ByMemory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMemory, opts...).ToFunc()
}

// ByDisk orders the results by the disk field.
func ByDisk(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisk, opts...).ToFunc()
}

// ByDiskIo orders the results by the disk_io field.
func ByDiskIo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiskIo, opts...).ToFunc()
}

// ByRouter orders the results by the router field.
func ByRouter(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRouter, opts...).ToFunc()
}

// ByNetStats orders the results by the net_stats field.
func ByNetStats(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNetStats, opts...).ToFunc()
}

// ByProcesses orders the results by the processes field.
func ByProcesses(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProcesses, opts...).ToFunc()
}

// ByZombieProcs orders the results by the zombie_procs field.
func ByZombieProcs(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldZombieProcs, opts...).ToFunc()
}

// ByTopProcesses orders the results by the top_processes field.
func ByTopProcesses(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTopProcesses, opts...).ToFunc()
}

// ByEnv orders the results by the env field.
func ByEnv(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnv, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}
