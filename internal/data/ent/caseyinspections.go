// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/youxihu/casey/internal/data/ent/caseyinspections"
)

// CaseyInspections is the model entity for the CaseyInspections schema.
type CaseyInspections struct {
	config `json:"-"`
	// ID of the ent.
	// 主键
	ID int64 `json:"id,omitempty"`
	// 采集时间，格式：YYYY-MM-DD HH:mm:ss
	Timestamp string `json:"timestamp,omitempty"`
	// 主机名
	Hostname string `json:"hostname,omitempty"`
	// IP地址
	IP string `json:"ip,omitempty"`
	// 操作系统名称及版本
	Os string `json:"os,omitempty"`
	// 系统运行时间，例如 up 1 hour, 49 minutes
	Uptime string `json:"uptime,omitempty"`
	// CPU信息，包含 total 核心数和 usage 使用率百分比
	CPU string `json:"cpu,omitempty"`
	// 负载平均值，三个 float 组成的数组 [1m, 5m, 15m]
	CPULoad string `json:"cpu_load,omitempty"`
	// 内存信息，包含 total/used/free/swapTotal/swapUsed (单位 GB)
	Memory string `json:"memory,omitempty"`
	// 磁盘信息，数组，每项含 path 挂载点、total/used/free (单位 GB)
	Disk string `json:"disk,omitempty"`
	// 磁盘 IO，包含 readPerSec/writePerSec 单位 KB/s
	DiskIo string `json:"disk_io,omitempty"`
	// 网卡接口名称，如 ens33, em1
	Router string `json:"router,omitempty"`
	// 网络统计，包含 download/upload 流量 (单位 MB/s 或 GB/s)
	NetStats string `json:"net_stats,omitempty"`
	// 进程总数
	Processes int32 `json:"processes,omitempty"`
	// 僵尸进程数
	ZombieProcs int32 `json:"zombie_procs,omitempty"`
	// 占用资源最高的前 N 个进程，包含 pid/name/cpuPercent/memUsage
	TopProcesses string `json:"top_processes,omitempty"`
	// 环境变量或其他附加信息（可为空）
	Env string `json:"env,omitempty"`
	// 记录创建时间
	CreatedAt    time.Time `json:"created_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CaseyInspections) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case caseyinspections.FieldID, caseyinspections.FieldProcesses, caseyinspections.FieldZombieProcs:
			values[i] = new(sql.NullInt64)
		case caseyinspections.FieldTimestamp, caseyinspections.FieldHostname, caseyinspections.FieldIP, caseyinspections.FieldOs, caseyinspections.FieldUptime, caseyinspections.FieldCPU, caseyinspections.FieldCPULoad, caseyinspections.FieldMemory, caseyinspections.FieldDisk, caseyinspections.FieldDiskIo, caseyinspections.FieldRouter, caseyinspections.FieldNetStats, caseyinspections.FieldTopProcesses, caseyinspections.FieldEnv:
			values[i] = new(sql.NullString)
		case caseyinspections.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CaseyInspections fields.
func (ci *CaseyInspections) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case caseyinspections.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ci.ID = int64(value.Int64)
		case caseyinspections.FieldTimestamp:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				ci.Timestamp = value.String
			}
		case caseyinspections.FieldHostname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hostname", values[i])
			} else if value.Valid {
				ci.Hostname = value.String
			}
		case caseyinspections.FieldIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip", values[i])
			} else if value.Valid {
				ci.IP = value.String
			}
		case caseyinspections.FieldOs:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field os", values[i])
			} else if value.Valid {
				ci.Os = value.String
			}
		case caseyinspections.FieldUptime:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uptime", values[i])
			} else if value.Valid {
				ci.Uptime = value.String
			}
		case caseyinspections.FieldCPU:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cpu", values[i])
			} else if value.Valid {
				ci.CPU = value.String
			}
		case caseyinspections.FieldCPULoad:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cpu_load", values[i])
			} else if value.Valid {
				ci.CPULoad = value.String
			}
		case caseyinspections.FieldMemory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field memory", values[i])
			} else if value.Valid {
				ci.Memory = value.String
			}
		case caseyinspections.FieldDisk:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field disk", values[i])
			} else if value.Valid {
				ci.Disk = value.String
			}
		case caseyinspections.FieldDiskIo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field disk_io", values[i])
			} else if value.Valid {
				ci.DiskIo = value.String
			}
		case caseyinspections.FieldRouter:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field router", values[i])
			} else if value.Valid {
				ci.Router = value.String
			}
		case caseyinspections.FieldNetStats:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field net_stats", values[i])
			} else if value.Valid {
				ci.NetStats = value.String
			}
		case caseyinspections.FieldProcesses:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field processes", values[i])
			} else if value.Valid {
				ci.Processes = int32(value.Int64)
			}
		case caseyinspections.FieldZombieProcs:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field zombie_procs", values[i])
			} else if value.Valid {
				ci.ZombieProcs = int32(value.Int64)
			}
		case caseyinspections.FieldTopProcesses:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field top_processes", values[i])
			} else if value.Valid {
				ci.TopProcesses = value.String
			}
		case caseyinspections.FieldEnv:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field env", values[i])
			} else if value.Valid {
				ci.Env = value.String
			}
		case caseyinspections.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ci.CreatedAt = value.Time
			}
		default:
			ci.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CaseyInspections.
// This includes values selected through modifiers, order, etc.
func (ci *CaseyInspections) Value(name string) (ent.Value, error) {
	return ci.selectValues.Get(name)
}

// Update returns a builder for updating this CaseyInspections.
// Note that you need to call CaseyInspections.Unwrap() before calling this method if this CaseyInspections
// was returned from a transaction, and the transaction was committed or rolled back.
func (ci *CaseyInspections) Update() *CaseyInspectionsUpdateOne {
	return NewCaseyInspectionsClient(ci.config).UpdateOne(ci)
}

// Unwrap unwraps the CaseyInspections entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ci *CaseyInspections) Unwrap() *CaseyInspections {
	_tx, ok := ci.config.driver.(*txDriver)
	if !ok {
		panic("ent: CaseyInspections is not a transactional entity")
	}
	ci.config.driver = _tx.drv
	return ci
}

// String implements the fmt.Stringer.
func (ci *CaseyInspections) String() string {
	var builder strings.Builder
	builder.WriteString("CaseyInspections(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ci.ID))
	builder.WriteString("timestamp=")
	builder.WriteString(ci.Timestamp)
	builder.WriteString(", ")
	builder.WriteString("hostname=")
	builder.WriteString(ci.Hostname)
	builder.WriteString(", ")
	builder.WriteString("ip=")
	builder.WriteString(ci.IP)
	builder.WriteString(", ")
	builder.WriteString("os=")
	builder.WriteString(ci.Os)
	builder.WriteString(", ")
	builder.WriteString("uptime=")
	builder.WriteString(ci.Uptime)
	builder.WriteString(", ")
	builder.WriteString("cpu=")
	builder.WriteString(ci.CPU)
	builder.WriteString(", ")
	builder.WriteString("cpu_load=")
	builder.WriteString(ci.CPULoad)
	builder.WriteString(", ")
	builder.WriteString("memory=")
	builder.WriteString(ci.Memory)
	builder.WriteString(", ")
	builder.WriteString("disk=")
	builder.WriteString(ci.Disk)
	builder.WriteString(", ")
	builder.WriteString("disk_io=")
	builder.WriteString(ci.DiskIo)
	builder.WriteString(", ")
	builder.WriteString("router=")
	builder.WriteString(ci.Router)
	builder.WriteString(", ")
	builder.WriteString("net_stats=")
	builder.WriteString(ci.NetStats)
	builder.WriteString(", ")
	builder.WriteString("processes=")
	builder.WriteString(fmt.Sprintf("%v", ci.Processes))
	builder.WriteString(", ")
	builder.WriteString("zombie_procs=")
	builder.WriteString(fmt.Sprintf("%v", ci.ZombieProcs))
	builder.WriteString(", ")
	builder.WriteString("top_processes=")
	builder.WriteString(ci.TopProcesses)
	builder.WriteString(", ")
	builder.WriteString("env=")
	builder.WriteString(ci.Env)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ci.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CaseyInspectionsSlice is a parsable slice of CaseyInspections.
type CaseyInspectionsSlice []*CaseyInspections
