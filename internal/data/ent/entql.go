// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/youxihu/casey/internal/data/ent/caseyinspections"
	"github.com/youxihu/casey/internal/data/ent/caseytrigger"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 2)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   caseyinspections.Table,
			Columns: caseyinspections.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: caseyinspections.FieldID,
			},
		},
		Type: "CaseyInspections",
		Fields: map[string]*sqlgraph.FieldSpec{
			caseyinspections.FieldTimestamp:    {Type: field.TypeString, Column: caseyinspections.FieldTimestamp},
			caseyinspections.FieldHostname:     {Type: field.TypeString, Column: caseyinspections.FieldHostname},
			caseyinspections.FieldIP:           {Type: field.TypeString, Column: caseyinspections.FieldIP},
			caseyinspections.FieldOs:           {Type: field.TypeString, Column: caseyinspections.FieldOs},
			caseyinspections.FieldUptime:       {Type: field.TypeString, Column: caseyinspections.FieldUptime},
			caseyinspections.FieldCPU:          {Type: field.TypeString, Column: caseyinspections.FieldCPU},
			caseyinspections.FieldCPULoad:      {Type: field.TypeString, Column: caseyinspections.FieldCPULoad},
			caseyinspections.FieldMemory:       {Type: field.TypeString, Column: caseyinspections.FieldMemory},
			caseyinspections.FieldDisk:         {Type: field.TypeString, Column: caseyinspections.FieldDisk},
			caseyinspections.FieldDiskIo:       {Type: field.TypeString, Column: caseyinspections.FieldDiskIo},
			caseyinspections.FieldRouter:       {Type: field.TypeString, Column: caseyinspections.FieldRouter},
			caseyinspections.FieldNetStats:     {Type: field.TypeString, Column: caseyinspections.FieldNetStats},
			caseyinspections.FieldProcesses:    {Type: field.TypeInt32, Column: caseyinspections.FieldProcesses},
			caseyinspections.FieldZombieProcs:  {Type: field.TypeInt32, Column: caseyinspections.FieldZombieProcs},
			caseyinspections.FieldTopProcesses: {Type: field.TypeString, Column: caseyinspections.FieldTopProcesses},
			caseyinspections.FieldEnv:          {Type: field.TypeString, Column: caseyinspections.FieldEnv},
			caseyinspections.FieldCreatedAt:    {Type: field.TypeTime, Column: caseyinspections.FieldCreatedAt},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   caseytrigger.Table,
			Columns: caseytrigger.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: caseytrigger.FieldID,
			},
		},
		Type: "CaseyTrigger",
		Fields: map[string]*sqlgraph.FieldSpec{
			caseytrigger.FieldExecutor:   {Type: field.TypeString, Column: caseytrigger.FieldExecutor},
			caseytrigger.FieldHostname:   {Type: field.TypeString, Column: caseytrigger.FieldHostname},
			caseytrigger.FieldCommand:    {Type: field.TypeString, Column: caseytrigger.FieldCommand},
			caseytrigger.FieldResponse:   {Type: field.TypeString, Column: caseytrigger.FieldResponse},
			caseytrigger.FieldExecutedAt: {Type: field.TypeTime, Column: caseytrigger.FieldExecutedAt},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (ciq *CaseyInspectionsQuery) addPredicate(pred func(s *sql.Selector)) {
	ciq.predicates = append(ciq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CaseyInspectionsQuery builder.
func (ciq *CaseyInspectionsQuery) Filter() *CaseyInspectionsFilter {
	return &CaseyInspectionsFilter{config: ciq.config, predicateAdder: ciq}
}

// addPredicate implements the predicateAdder interface.
func (m *CaseyInspectionsMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CaseyInspectionsMutation builder.
func (m *CaseyInspectionsMutation) Filter() *CaseyInspectionsFilter {
	return &CaseyInspectionsFilter{config: m.config, predicateAdder: m}
}

// CaseyInspectionsFilter provides a generic filtering capability at runtime for CaseyInspectionsQuery.
type CaseyInspectionsFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CaseyInspectionsFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int64 predicate on the id field.
func (f *CaseyInspectionsFilter) WhereID(p entql.Int64P) {
	f.Where(p.Field(caseyinspections.FieldID))
}

// WhereTimestamp applies the entql string predicate on the timestamp field.
func (f *CaseyInspectionsFilter) WhereTimestamp(p entql.StringP) {
	f.Where(p.Field(caseyinspections.FieldTimestamp))
}

// WhereHostname applies the entql string predicate on the hostname field.
func (f *CaseyInspectionsFilter) WhereHostname(p entql.StringP) {
	f.Where(p.Field(caseyinspections.FieldHostname))
}

// WhereIP applies the entql string predicate on the ip field.
func (f *CaseyInspectionsFilter) WhereIP(p entql.StringP) {
	f.Where(p.Field(caseyinspections.FieldIP))
}

// WhereOs applies the entql string predicate on the os field.
func (f *CaseyInspectionsFilter) WhereOs(p entql.StringP) {
	f.Where(p.Field(caseyinspections.FieldOs))
}

// WhereUptime applies the entql string predicate on the uptime field.
func (f *CaseyInspectionsFilter) WhereUptime(p entql.StringP) {
	f.Where(p.Field(caseyinspections.FieldUptime))
}

// WhereCPU applies the entql string predicate on the cpu field.
func (f *CaseyInspectionsFilter) WhereCPU(p entql.StringP) {
	f.Where(p.Field(caseyinspections.FieldCPU))
}

// WhereCPULoad applies the entql string predicate on the cpu_load field.
func (f *CaseyInspectionsFilter) WhereCPULoad(p entql.StringP) {
	f.Where(p.Field(caseyinspections.FieldCPULoad))
}

// WhereMemory applies the entql string predicate on the memory field.
func (f *CaseyInspectionsFilter) WhereMemory(p entql.StringP) {
	f.Where(p.Field(caseyinspections.FieldMemory))
}

// WhereDisk applies the entql string predicate on the disk field.
func (f *CaseyInspectionsFilter) WhereDisk(p entql.StringP) {
	f.Where(p.Field(caseyinspections.FieldDisk))
}

// WhereDiskIo applies the entql string predicate on the disk_io field.
func (f *CaseyInspectionsFilter) WhereDiskIo(p entql.StringP) {
	f.Where(p.Field(caseyinspections.FieldDiskIo))
}

// WhereRouter applies the entql string predicate on the router field.
func (f *CaseyInspectionsFilter) WhereRouter(p entql.StringP) {
	f.Where(p.Field(caseyinspections.FieldRouter))
}

// WhereNetStats applies the entql string predicate on the net_stats field.
func (f *CaseyInspectionsFilter) WhereNetStats(p entql.StringP) {
	f.Where(p.Field(caseyinspections.FieldNetStats))
}

// WhereProcesses applies the entql int32 predicate on the processes field.
func (f *CaseyInspectionsFilter) WhereProcesses(p entql.Int32P) {
	f.Where(p.Field(caseyinspections.FieldProcesses))
}

// WhereZombieProcs applies the entql int32 predicate on the zombie_procs field.
func (f *CaseyInspectionsFilter) WhereZombieProcs(p entql.Int32P) {
	f.Where(p.Field(caseyinspections.FieldZombieProcs))
}

// WhereTopProcesses applies the entql string predicate on the top_processes field.
func (f *CaseyInspectionsFilter) WhereTopProcesses(p entql.StringP) {
	f.Where(p.Field(caseyinspections.FieldTopProcesses))
}

// WhereEnv applies the entql string predicate on the env field.
func (f *CaseyInspectionsFilter) WhereEnv(p entql.StringP) {
	f.Where(p.Field(caseyinspections.FieldEnv))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *CaseyInspectionsFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(caseyinspections.FieldCreatedAt))
}

// addPredicate implements the predicateAdder interface.
func (ctq *CaseyTriggerQuery) addPredicate(pred func(s *sql.Selector)) {
	ctq.predicates = append(ctq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CaseyTriggerQuery builder.
func (ctq *CaseyTriggerQuery) Filter() *CaseyTriggerFilter {
	return &CaseyTriggerFilter{config: ctq.config, predicateAdder: ctq}
}

// addPredicate implements the predicateAdder interface.
func (m *CaseyTriggerMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CaseyTriggerMutation builder.
func (m *CaseyTriggerMutation) Filter() *CaseyTriggerFilter {
	return &CaseyTriggerFilter{config: m.config, predicateAdder: m}
}

// CaseyTriggerFilter provides a generic filtering capability at runtime for CaseyTriggerQuery.
type CaseyTriggerFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CaseyTriggerFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int64 predicate on the id field.
func (f *CaseyTriggerFilter) WhereID(p entql.Int64P) {
	f.Where(p.Field(caseytrigger.FieldID))
}

// WhereExecutor applies the entql string predicate on the executor field.
func (f *CaseyTriggerFilter) WhereExecutor(p entql.StringP) {
	f.Where(p.Field(caseytrigger.FieldExecutor))
}

// WhereHostname applies the entql string predicate on the hostname field.
func (f *CaseyTriggerFilter) WhereHostname(p entql.StringP) {
	f.Where(p.Field(caseytrigger.FieldHostname))
}

// WhereCommand applies the entql string predicate on the command field.
func (f *CaseyTriggerFilter) WhereCommand(p entql.StringP) {
	f.Where(p.Field(caseytrigger.FieldCommand))
}

// WhereResponse applies the entql string predicate on the response field.
func (f *CaseyTriggerFilter) WhereResponse(p entql.StringP) {
	f.Where(p.Field(caseytrigger.FieldResponse))
}

// WhereExecutedAt applies the entql time.Time predicate on the executed_at field.
func (f *CaseyTriggerFilter) WhereExecutedAt(p entql.TimeP) {
	f.Where(p.Field(caseytrigger.FieldExecutedAt))
}
