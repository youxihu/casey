// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/youxihu/casey/internal/data/ent/caseytrigger"
	"github.com/youxihu/casey/internal/data/ent/predicate"
)

// CaseyTriggerUpdate is the builder for updating CaseyTrigger entities.
type CaseyTriggerUpdate struct {
	config
	hooks     []Hook
	mutation  *CaseyTriggerMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CaseyTriggerUpdate builder.
func (ctu *CaseyTriggerUpdate) Where(ps ...predicate.CaseyTrigger) *CaseyTriggerUpdate {
	ctu.mutation.Where(ps...)
	return ctu
}

// SetExecutor sets the "executor" field.
func (ctu *CaseyTriggerUpdate) SetExecutor(s string) *CaseyTriggerUpdate {
	ctu.mutation.SetExecutor(s)
	return ctu
}

// SetNillableExecutor sets the "executor" field if the given value is not nil.
func (ctu *CaseyTriggerUpdate) SetNillableExecutor(s *string) *CaseyTriggerUpdate {
	if s != nil {
		ctu.SetExecutor(*s)
	}
	return ctu
}

// SetHostname sets the "hostname" field.
func (ctu *CaseyTriggerUpdate) SetHostname(s string) *CaseyTriggerUpdate {
	ctu.mutation.SetHostname(s)
	return ctu
}

// SetNillableHostname sets the "hostname" field if the given value is not nil.
func (ctu *CaseyTriggerUpdate) SetNillableHostname(s *string) *CaseyTriggerUpdate {
	if s != nil {
		ctu.SetHostname(*s)
	}
	return ctu
}

// SetCommand sets the "command" field.
func (ctu *CaseyTriggerUpdate) SetCommand(s string) *CaseyTriggerUpdate {
	ctu.mutation.SetCommand(s)
	return ctu
}

// SetNillableCommand sets the "command" field if the given value is not nil.
func (ctu *CaseyTriggerUpdate) SetNillableCommand(s *string) *CaseyTriggerUpdate {
	if s != nil {
		ctu.SetCommand(*s)
	}
	return ctu
}

// SetResponse sets the "response" field.
func (ctu *CaseyTriggerUpdate) SetResponse(s string) *CaseyTriggerUpdate {
	ctu.mutation.SetResponse(s)
	return ctu
}

// SetNillableResponse sets the "response" field if the given value is not nil.
func (ctu *CaseyTriggerUpdate) SetNillableResponse(s *string) *CaseyTriggerUpdate {
	if s != nil {
		ctu.SetResponse(*s)
	}
	return ctu
}

// ClearResponse clears the value of the "response" field.
func (ctu *CaseyTriggerUpdate) ClearResponse() *CaseyTriggerUpdate {
	ctu.mutation.ClearResponse()
	return ctu
}

// SetExecutedAt sets the "executed_at" field.
func (ctu *CaseyTriggerUpdate) SetExecutedAt(t time.Time) *CaseyTriggerUpdate {
	ctu.mutation.SetExecutedAt(t)
	return ctu
}

// SetNillableExecutedAt sets the "executed_at" field if the given value is not nil.
func (ctu *CaseyTriggerUpdate) SetNillableExecutedAt(t *time.Time) *CaseyTriggerUpdate {
	if t != nil {
		ctu.SetExecutedAt(*t)
	}
	return ctu
}

// ClearExecutedAt clears the value of the "executed_at" field.
func (ctu *CaseyTriggerUpdate) ClearExecutedAt() *CaseyTriggerUpdate {
	ctu.mutation.ClearExecutedAt()
	return ctu
}

// Mutation returns the CaseyTriggerMutation object of the builder.
func (ctu *CaseyTriggerUpdate) Mutation() *CaseyTriggerMutation {
	return ctu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ctu *CaseyTriggerUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ctu.sqlSave, ctu.mutation, ctu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ctu *CaseyTriggerUpdate) SaveX(ctx context.Context) int {
	affected, err := ctu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ctu *CaseyTriggerUpdate) Exec(ctx context.Context) error {
	_, err := ctu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctu *CaseyTriggerUpdate) ExecX(ctx context.Context) {
	if err := ctu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ctu *CaseyTriggerUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CaseyTriggerUpdate {
	ctu.modifiers = append(ctu.modifiers, modifiers...)
	return ctu
}

func (ctu *CaseyTriggerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(caseytrigger.Table, caseytrigger.Columns, sqlgraph.NewFieldSpec(caseytrigger.FieldID, field.TypeInt64))
	if ps := ctu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ctu.mutation.Executor(); ok {
		_spec.SetField(caseytrigger.FieldExecutor, field.TypeString, value)
	}
	if value, ok := ctu.mutation.Hostname(); ok {
		_spec.SetField(caseytrigger.FieldHostname, field.TypeString, value)
	}
	if value, ok := ctu.mutation.Command(); ok {
		_spec.SetField(caseytrigger.FieldCommand, field.TypeString, value)
	}
	if value, ok := ctu.mutation.Response(); ok {
		_spec.SetField(caseytrigger.FieldResponse, field.TypeString, value)
	}
	if ctu.mutation.ResponseCleared() {
		_spec.ClearField(caseytrigger.FieldResponse, field.TypeString)
	}
	if value, ok := ctu.mutation.ExecutedAt(); ok {
		_spec.SetField(caseytrigger.FieldExecutedAt, field.TypeTime, value)
	}
	if ctu.mutation.ExecutedAtCleared() {
		_spec.ClearField(caseytrigger.FieldExecutedAt, field.TypeTime)
	}
	_spec.AddModifiers(ctu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ctu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{caseytrigger.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ctu.mutation.done = true
	return n, nil
}

// CaseyTriggerUpdateOne is the builder for updating a single CaseyTrigger entity.
type CaseyTriggerUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CaseyTriggerMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetExecutor sets the "executor" field.
func (ctuo *CaseyTriggerUpdateOne) SetExecutor(s string) *CaseyTriggerUpdateOne {
	ctuo.mutation.SetExecutor(s)
	return ctuo
}

// SetNillableExecutor sets the "executor" field if the given value is not nil.
func (ctuo *CaseyTriggerUpdateOne) SetNillableExecutor(s *string) *CaseyTriggerUpdateOne {
	if s != nil {
		ctuo.SetExecutor(*s)
	}
	return ctuo
}

// SetHostname sets the "hostname" field.
func (ctuo *CaseyTriggerUpdateOne) SetHostname(s string) *CaseyTriggerUpdateOne {
	ctuo.mutation.SetHostname(s)
	return ctuo
}

// SetNillableHostname sets the "hostname" field if the given value is not nil.
func (ctuo *CaseyTriggerUpdateOne) SetNillableHostname(s *string) *CaseyTriggerUpdateOne {
	if s != nil {
		ctuo.SetHostname(*s)
	}
	return ctuo
}

// SetCommand sets the "command" field.
func (ctuo *CaseyTriggerUpdateOne) SetCommand(s string) *CaseyTriggerUpdateOne {
	ctuo.mutation.SetCommand(s)
	return ctuo
}

// SetNillableCommand sets the "command" field if the given value is not nil.
func (ctuo *CaseyTriggerUpdateOne) SetNillableCommand(s *string) *CaseyTriggerUpdateOne {
	if s != nil {
		ctuo.SetCommand(*s)
	}
	return ctuo
}

// SetResponse sets the "response" field.
func (ctuo *CaseyTriggerUpdateOne) SetResponse(s string) *CaseyTriggerUpdateOne {
	ctuo.mutation.SetResponse(s)
	return ctuo
}

// SetNillableResponse sets the "response" field if the given value is not nil.
func (ctuo *CaseyTriggerUpdateOne) SetNillableResponse(s *string) *CaseyTriggerUpdateOne {
	if s != nil {
		ctuo.SetResponse(*s)
	}
	return ctuo
}

// ClearResponse clears the value of the "response" field.
func (ctuo *CaseyTriggerUpdateOne) ClearResponse() *CaseyTriggerUpdateOne {
	ctuo.mutation.ClearResponse()
	return ctuo
}

// SetExecutedAt sets the "executed_at" field.
func (ctuo *CaseyTriggerUpdateOne) SetExecutedAt(t time.Time) *CaseyTriggerUpdateOne {
	ctuo.mutation.SetExecutedAt(t)
	return ctuo
}

// SetNillableExecutedAt sets the "executed_at" field if the given value is not nil.
func (ctuo *CaseyTriggerUpdateOne) SetNillableExecutedAt(t *time.Time) *CaseyTriggerUpdateOne {
	if t != nil {
		ctuo.SetExecutedAt(*t)
	}
	return ctuo
}

// ClearExecutedAt clears the value of the "executed_at" field.
func (ctuo *CaseyTriggerUpdateOne) ClearExecutedAt() *CaseyTriggerUpdateOne {
	ctuo.mutation.ClearExecutedAt()
	return ctuo
}

// Mutation returns the CaseyTriggerMutation object of the builder.
func (ctuo *CaseyTriggerUpdateOne) Mutation() *CaseyTriggerMutation {
	return ctuo.mutation
}

// Where appends a list predicates to the CaseyTriggerUpdate builder.
func (ctuo *CaseyTriggerUpdateOne) Where(ps ...predicate.CaseyTrigger) *CaseyTriggerUpdateOne {
	ctuo.mutation.Where(ps...)
	return ctuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ctuo *CaseyTriggerUpdateOne) Select(field string, fields ...string) *CaseyTriggerUpdateOne {
	ctuo.fields = append([]string{field}, fields...)
	return ctuo
}

// Save executes the query and returns the updated CaseyTrigger entity.
func (ctuo *CaseyTriggerUpdateOne) Save(ctx context.Context) (*CaseyTrigger, error) {
	return withHooks(ctx, ctuo.sqlSave, ctuo.mutation, ctuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ctuo *CaseyTriggerUpdateOne) SaveX(ctx context.Context) *CaseyTrigger {
	node, err := ctuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ctuo *CaseyTriggerUpdateOne) Exec(ctx context.Context) error {
	_, err := ctuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctuo *CaseyTriggerUpdateOne) ExecX(ctx context.Context) {
	if err := ctuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ctuo *CaseyTriggerUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CaseyTriggerUpdateOne {
	ctuo.modifiers = append(ctuo.modifiers, modifiers...)
	return ctuo
}

func (ctuo *CaseyTriggerUpdateOne) sqlSave(ctx context.Context) (_node *CaseyTrigger, err error) {
	_spec := sqlgraph.NewUpdateSpec(caseytrigger.Table, caseytrigger.Columns, sqlgraph.NewFieldSpec(caseytrigger.FieldID, field.TypeInt64))
	id, ok := ctuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CaseyTrigger.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ctuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, caseytrigger.FieldID)
		for _, f := range fields {
			if !caseytrigger.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != caseytrigger.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ctuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ctuo.mutation.Executor(); ok {
		_spec.SetField(caseytrigger.FieldExecutor, field.TypeString, value)
	}
	if value, ok := ctuo.mutation.Hostname(); ok {
		_spec.SetField(caseytrigger.FieldHostname, field.TypeString, value)
	}
	if value, ok := ctuo.mutation.Command(); ok {
		_spec.SetField(caseytrigger.FieldCommand, field.TypeString, value)
	}
	if value, ok := ctuo.mutation.Response(); ok {
		_spec.SetField(caseytrigger.FieldResponse, field.TypeString, value)
	}
	if ctuo.mutation.ResponseCleared() {
		_spec.ClearField(caseytrigger.FieldResponse, field.TypeString)
	}
	if value, ok := ctuo.mutation.ExecutedAt(); ok {
		_spec.SetField(caseytrigger.FieldExecutedAt, field.TypeTime, value)
	}
	if ctuo.mutation.ExecutedAtCleared() {
		_spec.ClearField(caseytrigger.FieldExecutedAt, field.TypeTime)
	}
	_spec.AddModifiers(ctuo.modifiers...)
	_node = &CaseyTrigger{config: ctuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ctuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{caseytrigger.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ctuo.mutation.done = true
	return _node, nil
}
