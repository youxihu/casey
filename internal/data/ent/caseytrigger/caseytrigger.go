// Code generated by ent, DO NOT EDIT.

package caseytrigger

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the caseytrigger type in the database.
	Label = "casey_trigger"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldExecutor holds the string denoting the executor field in the database.
	FieldExecutor = "executor"
	// FieldHostname holds the string denoting the hostname field in the database.
	FieldHostname = "hostname"
	// FieldCommand holds the string denoting the command field in the database.
	FieldCommand = "command"
	// FieldResponse holds the string denoting the response field in the database.
	FieldResponse = "response"
	// FieldExecutedAt holds the string denoting the executed_at field in the database.
	FieldExecutedAt = "executed_at"
	// Table holds the table name of the caseytrigger in the database.
	Table = "casey_trigger"
)

// Columns holds all SQL columns for caseytrigger fields.
var Columns = []string{
	FieldID,
	FieldExecutor,
	FieldHostname,
	FieldCommand,
	FieldResponse,
	FieldExecutedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultExecutedAt holds the default value on creation for the "executed_at" field.
	DefaultExecutedAt func() time.Time
)

// OrderOption defines the ordering options for the CaseyTrigger queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByExecutor orders the results by the executor field.
func ByExecutor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExecutor, opts...).ToFunc()
}

// ByHostname orders the results by the hostname field.
func ByHostname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHostname, opts...).ToFunc()
}

// ByCommand orders the results by the command field.
func ByCommand(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCommand, opts...).ToFunc()
}

// ByResponse orders the results by the response field.
func ByResponse(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResponse, opts...).ToFunc()
}

// ByExecutedAt orders the results by the executed_at field.
func ByExecutedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExecutedAt, opts...).ToFunc()
}
