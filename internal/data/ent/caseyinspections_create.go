// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/youxihu/casey/internal/data/ent/caseyinspections"
)

// CaseyInspectionsCreate is the builder for creating a CaseyInspections entity.
type CaseyInspectionsCreate struct {
	config
	mutation *CaseyInspectionsMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTimestamp sets the "timestamp" field.
func (cic *CaseyInspectionsCreate) SetTimestamp(s string) *CaseyInspectionsCreate {
	cic.mutation.SetTimestamp(s)
	return cic
}

// SetHostname sets the "hostname" field.
func (cic *CaseyInspectionsCreate) SetHostname(s string) *CaseyInspectionsCreate {
	cic.mutation.SetHostname(s)
	return cic
}

// SetIP sets the "ip" field.
func (cic *CaseyInspectionsCreate) SetIP(s string) *CaseyInspectionsCreate {
	cic.mutation.SetIP(s)
	return cic
}

// SetOs sets the "os" field.
func (cic *CaseyInspectionsCreate) SetOs(s string) *CaseyInspectionsCreate {
	cic.mutation.SetOs(s)
	return cic
}

// SetUptime sets the "uptime" field.
func (cic *CaseyInspectionsCreate) SetUptime(s string) *CaseyInspectionsCreate {
	cic.mutation.SetUptime(s)
	return cic
}

// SetCPU sets the "cpu" field.
func (cic *CaseyInspectionsCreate) SetCPU(s string) *CaseyInspectionsCreate {
	cic.mutation.SetCPU(s)
	return cic
}

// SetCPULoad sets the "cpu_load" field.
func (cic *CaseyInspectionsCreate) SetCPULoad(s string) *CaseyInspectionsCreate {
	cic.mutation.SetCPULoad(s)
	return cic
}

// SetMemory sets the "memory" field.
func (cic *CaseyInspectionsCreate) SetMemory(s string) *CaseyInspectionsCreate {
	cic.mutation.SetMemory(s)
	return cic
}

// SetDisk sets the "disk" field.
func (cic *CaseyInspectionsCreate) SetDisk(s string) *CaseyInspectionsCreate {
	cic.mutation.SetDisk(s)
	return cic
}

// SetDiskIo sets the "disk_io" field.
func (cic *CaseyInspectionsCreate) SetDiskIo(s string) *CaseyInspectionsCreate {
	cic.mutation.SetDiskIo(s)
	return cic
}

// SetRouter sets the "router" field.
func (cic *CaseyInspectionsCreate) SetRouter(s string) *CaseyInspectionsCreate {
	cic.mutation.SetRouter(s)
	return cic
}

// SetNetStats sets the "net_stats" field.
func (cic *CaseyInspectionsCreate) SetNetStats(s string) *CaseyInspectionsCreate {
	cic.mutation.SetNetStats(s)
	return cic
}

// SetProcesses sets the "processes" field.
func (cic *CaseyInspectionsCreate) SetProcesses(i int32) *CaseyInspectionsCreate {
	cic.mutation.SetProcesses(i)
	return cic
}

// SetZombieProcs sets the "zombie_procs" field.
func (cic *CaseyInspectionsCreate) SetZombieProcs(i int32) *CaseyInspectionsCreate {
	cic.mutation.SetZombieProcs(i)
	return cic
}

// SetTopProcesses sets the "top_processes" field.
func (cic *CaseyInspectionsCreate) SetTopProcesses(s string) *CaseyInspectionsCreate {
	cic.mutation.SetTopProcesses(s)
	return cic
}

// SetEnv sets the "env" field.
func (cic *CaseyInspectionsCreate) SetEnv(s string) *CaseyInspectionsCreate {
	cic.mutation.SetEnv(s)
	return cic
}

// SetNillableEnv sets the "env" field if the given value is not nil.
func (cic *CaseyInspectionsCreate) SetNillableEnv(s *string) *CaseyInspectionsCreate {
	if s != nil {
		cic.SetEnv(*s)
	}
	return cic
}

// SetCreatedAt sets the "created_at" field.
func (cic *CaseyInspectionsCreate) SetCreatedAt(t time.Time) *CaseyInspectionsCreate {
	cic.mutation.SetCreatedAt(t)
	return cic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cic *CaseyInspectionsCreate) SetNillableCreatedAt(t *time.Time) *CaseyInspectionsCreate {
	if t != nil {
		cic.SetCreatedAt(*t)
	}
	return cic
}

// SetID sets the "id" field.
func (cic *CaseyInspectionsCreate) SetID(i int64) *CaseyInspectionsCreate {
	cic.mutation.SetID(i)
	return cic
}

// Mutation returns the CaseyInspectionsMutation object of the builder.
func (cic *CaseyInspectionsCreate) Mutation() *CaseyInspectionsMutation {
	return cic.mutation
}

// Save creates the CaseyInspections in the database.
func (cic *CaseyInspectionsCreate) Save(ctx context.Context) (*CaseyInspections, error) {
	cic.defaults()
	return withHooks(ctx, cic.sqlSave, cic.mutation, cic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cic *CaseyInspectionsCreate) SaveX(ctx context.Context) *CaseyInspections {
	v, err := cic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cic *CaseyInspectionsCreate) Exec(ctx context.Context) error {
	_, err := cic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cic *CaseyInspectionsCreate) ExecX(ctx context.Context) {
	if err := cic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cic *CaseyInspectionsCreate) defaults() {
	if _, ok := cic.mutation.CreatedAt(); !ok {
		v := caseyinspections.DefaultCreatedAt()
		cic.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cic *CaseyInspectionsCreate) check() error {
	if _, ok := cic.mutation.Timestamp(); !ok {
		return &ValidationError{Name: "timestamp", err: errors.New(`ent: missing required field "CaseyInspections.timestamp"`)}
	}
	if _, ok := cic.mutation.Hostname(); !ok {
		return &ValidationError{Name: "hostname", err: errors.New(`ent: missing required field "CaseyInspections.hostname"`)}
	}
	if _, ok := cic.mutation.IP(); !ok {
		return &ValidationError{Name: "ip", err: errors.New(`ent: missing required field "CaseyInspections.ip"`)}
	}
	if _, ok := cic.mutation.Os(); !ok {
		return &ValidationError{Name: "os", err: errors.New(`ent: missing required field "CaseyInspections.os"`)}
	}
	if _, ok := cic.mutation.Uptime(); !ok {
		return &ValidationError{Name: "uptime", err: errors.New(`ent: missing required field "CaseyInspections.uptime"`)}
	}
	if _, ok := cic.mutation.CPU(); !ok {
		return &ValidationError{Name: "cpu", err: errors.New(`ent: missing required field "CaseyInspections.cpu"`)}
	}
	if _, ok := cic.mutation.CPULoad(); !ok {
		return &ValidationError{Name: "cpu_load", err: errors.New(`ent: missing required field "CaseyInspections.cpu_load"`)}
	}
	if _, ok := cic.mutation.Memory(); !ok {
		return &ValidationError{Name: "memory", err: errors.New(`ent: missing required field "CaseyInspections.memory"`)}
	}
	if _, ok := cic.mutation.Disk(); !ok {
		return &ValidationError{Name: "disk", err: errors.New(`ent: missing required field "CaseyInspections.disk"`)}
	}
	if _, ok := cic.mutation.DiskIo(); !ok {
		return &ValidationError{Name: "disk_io", err: errors.New(`ent: missing required field "CaseyInspections.disk_io"`)}
	}
	if _, ok := cic.mutation.Router(); !ok {
		return &ValidationError{Name: "router", err: errors.New(`ent: missing required field "CaseyInspections.router"`)}
	}
	if _, ok := cic.mutation.NetStats(); !ok {
		return &ValidationError{Name: "net_stats", err: errors.New(`ent: missing required field "CaseyInspections.net_stats"`)}
	}
	if _, ok := cic.mutation.Processes(); !ok {
		return &ValidationError{Name: "processes", err: errors.New(`ent: missing required field "CaseyInspections.processes"`)}
	}
	if _, ok := cic.mutation.ZombieProcs(); !ok {
		return &ValidationError{Name: "zombie_procs", err: errors.New(`ent: missing required field "CaseyInspections.zombie_procs"`)}
	}
	if _, ok := cic.mutation.TopProcesses(); !ok {
		return &ValidationError{Name: "top_processes", err: errors.New(`ent: missing required field "CaseyInspections.top_processes"`)}
	}
	if _, ok := cic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CaseyInspections.created_at"`)}
	}
	return nil
}

func (cic *CaseyInspectionsCreate) sqlSave(ctx context.Context) (*CaseyInspections, error) {
	if err := cic.check(); err != nil {
		return nil, err
	}
	_node, _spec := cic.createSpec()
	if err := sqlgraph.CreateNode(ctx, cic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	cic.mutation.id = &_node.ID
	cic.mutation.done = true
	return _node, nil
}

func (cic *CaseyInspectionsCreate) createSpec() (*CaseyInspections, *sqlgraph.CreateSpec) {
	var (
		_node = &CaseyInspections{config: cic.config}
		_spec = sqlgraph.NewCreateSpec(caseyinspections.Table, sqlgraph.NewFieldSpec(caseyinspections.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = cic.conflict
	if id, ok := cic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cic.mutation.Timestamp(); ok {
		_spec.SetField(caseyinspections.FieldTimestamp, field.TypeString, value)
		_node.Timestamp = value
	}
	if value, ok := cic.mutation.Hostname(); ok {
		_spec.SetField(caseyinspections.FieldHostname, field.TypeString, value)
		_node.Hostname = value
	}
	if value, ok := cic.mutation.IP(); ok {
		_spec.SetField(caseyinspections.FieldIP, field.TypeString, value)
		_node.IP = value
	}
	if value, ok := cic.mutation.Os(); ok {
		_spec.SetField(caseyinspections.FieldOs, field.TypeString, value)
		_node.Os = value
	}
	if value, ok := cic.mutation.Uptime(); ok {
		_spec.SetField(caseyinspections.FieldUptime, field.TypeString, value)
		_node.Uptime = value
	}
	if value, ok := cic.mutation.CPU(); ok {
		_spec.SetField(caseyinspections.FieldCPU, field.TypeString, value)
		_node.CPU = value
	}
	if value, ok := cic.mutation.CPULoad(); ok {
		_spec.SetField(caseyinspections.FieldCPULoad, field.TypeString, value)
		_node.CPULoad = value
	}
	if value, ok := cic.mutation.Memory(); ok {
		_spec.SetField(caseyinspections.FieldMemory, field.TypeString, value)
		_node.Memory = value
	}
	if value, ok := cic.mutation.Disk(); ok {
		_spec.SetField(caseyinspections.FieldDisk, field.TypeString, value)
		_node.Disk = value
	}
	if value, ok := cic.mutation.DiskIo(); ok {
		_spec.SetField(caseyinspections.FieldDiskIo, field.TypeString, value)
		_node.DiskIo = value
	}
	if value, ok := cic.mutation.Router(); ok {
		_spec.SetField(caseyinspections.FieldRouter, field.TypeString, value)
		_node.Router = value
	}
	if value, ok := cic.mutation.NetStats(); ok {
		_spec.SetField(caseyinspections.FieldNetStats, field.TypeString, value)
		_node.NetStats = value
	}
	if value, ok := cic.mutation.Processes(); ok {
		_spec.SetField(caseyinspections.FieldProcesses, field.TypeInt32, value)
		_node.Processes = value
	}
	if value, ok := cic.mutation.ZombieProcs(); ok {
		_spec.SetField(caseyinspections.FieldZombieProcs, field.TypeInt32, value)
		_node.ZombieProcs = value
	}
	if value, ok := cic.mutation.TopProcesses(); ok {
		_spec.SetField(caseyinspections.FieldTopProcesses, field.TypeString, value)
		_node.TopProcesses = value
	}
	if value, ok := cic.mutation.Env(); ok {
		_spec.SetField(caseyinspections.FieldEnv, field.TypeString, value)
		_node.Env = value
	}
	if value, ok := cic.mutation.CreatedAt(); ok {
		_spec.SetField(caseyinspections.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CaseyInspections.Create().
//		SetTimestamp(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CaseyInspectionsUpsert) {
//			SetTimestamp(v+v).
//		}).
//		Exec(ctx)
func (cic *CaseyInspectionsCreate) OnConflict(opts ...sql.ConflictOption) *CaseyInspectionsUpsertOne {
	cic.conflict = opts
	return &CaseyInspectionsUpsertOne{
		create: cic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CaseyInspections.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cic *CaseyInspectionsCreate) OnConflictColumns(columns ...string) *CaseyInspectionsUpsertOne {
	cic.conflict = append(cic.conflict, sql.ConflictColumns(columns...))
	return &CaseyInspectionsUpsertOne{
		create: cic,
	}
}

type (
	// CaseyInspectionsUpsertOne is the builder for "upsert"-ing
	//  one CaseyInspections node.
	CaseyInspectionsUpsertOne struct {
		create *CaseyInspectionsCreate
	}

	// CaseyInspectionsUpsert is the "OnConflict" setter.
	CaseyInspectionsUpsert struct {
		*sql.UpdateSet
	}
)

// SetTimestamp sets the "timestamp" field.
func (u *CaseyInspectionsUpsert) SetTimestamp(v string) *CaseyInspectionsUpsert {
	u.Set(caseyinspections.FieldTimestamp, v)
	return u
}

// UpdateTimestamp sets the "timestamp" field to the value that was provided on create.
func (u *CaseyInspectionsUpsert) UpdateTimestamp() *CaseyInspectionsUpsert {
	u.SetExcluded(caseyinspections.FieldTimestamp)
	return u
}

// SetHostname sets the "hostname" field.
func (u *CaseyInspectionsUpsert) SetHostname(v string) *CaseyInspectionsUpsert {
	u.Set(caseyinspections.FieldHostname, v)
	return u
}

// UpdateHostname sets the "hostname" field to the value that was provided on create.
func (u *CaseyInspectionsUpsert) UpdateHostname() *CaseyInspectionsUpsert {
	u.SetExcluded(caseyinspections.FieldHostname)
	return u
}

// SetIP sets the "ip" field.
func (u *CaseyInspectionsUpsert) SetIP(v string) *CaseyInspectionsUpsert {
	u.Set(caseyinspections.FieldIP, v)
	return u
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *CaseyInspectionsUpsert) UpdateIP() *CaseyInspectionsUpsert {
	u.SetExcluded(caseyinspections.FieldIP)
	return u
}

// SetOs sets the "os" field.
func (u *CaseyInspectionsUpsert) SetOs(v string) *CaseyInspectionsUpsert {
	u.Set(caseyinspections.FieldOs, v)
	return u
}

// UpdateOs sets the "os" field to the value that was provided on create.
func (u *CaseyInspectionsUpsert) UpdateOs() *CaseyInspectionsUpsert {
	u.SetExcluded(caseyinspections.FieldOs)
	return u
}

// SetUptime sets the "uptime" field.
func (u *CaseyInspectionsUpsert) SetUptime(v string) *CaseyInspectionsUpsert {
	u.Set(caseyinspections.FieldUptime, v)
	return u
}

// UpdateUptime sets the "uptime" field to the value that was provided on create.
func (u *CaseyInspectionsUpsert) UpdateUptime() *CaseyInspectionsUpsert {
	u.SetExcluded(caseyinspections.FieldUptime)
	return u
}

// SetCPU sets the "cpu" field.
func (u *CaseyInspectionsUpsert) SetCPU(v string) *CaseyInspectionsUpsert {
	u.Set(caseyinspections.FieldCPU, v)
	return u
}

// UpdateCPU sets the "cpu" field to the value that was provided on create.
func (u *CaseyInspectionsUpsert) UpdateCPU() *CaseyInspectionsUpsert {
	u.SetExcluded(caseyinspections.FieldCPU)
	return u
}

// SetCPULoad sets the "cpu_load" field.
func (u *CaseyInspectionsUpsert) SetCPULoad(v string) *CaseyInspectionsUpsert {
	u.Set(caseyinspections.FieldCPULoad, v)
	return u
}

// UpdateCPULoad sets the "cpu_load" field to the value that was provided on create.
func (u *CaseyInspectionsUpsert) UpdateCPULoad() *CaseyInspectionsUpsert {
	u.SetExcluded(caseyinspections.FieldCPULoad)
	return u
}

// SetMemory sets the "memory" field.
func (u *CaseyInspectionsUpsert) SetMemory(v string) *CaseyInspectionsUpsert {
	u.Set(caseyinspections.FieldMemory, v)
	return u
}

// UpdateMemory sets the "memory" field to the value that was provided on create.
func (u *CaseyInspectionsUpsert) UpdateMemory() *CaseyInspectionsUpsert {
	u.SetExcluded(caseyinspections.FieldMemory)
	return u
}

// SetDisk sets the "disk" field.
func (u *CaseyInspectionsUpsert) SetDisk(v string) *CaseyInspectionsUpsert {
	u.Set(caseyinspections.FieldDisk, v)
	return u
}

// UpdateDisk sets the "disk" field to the value that was provided on create.
func (u *CaseyInspectionsUpsert) UpdateDisk() *CaseyInspectionsUpsert {
	u.SetExcluded(caseyinspections.FieldDisk)
	return u
}

// SetDiskIo sets the "disk_io" field.
func (u *CaseyInspectionsUpsert) SetDiskIo(v string) *CaseyInspectionsUpsert {
	u.Set(caseyinspections.FieldDiskIo, v)
	return u
}

// UpdateDiskIo sets the "disk_io" field to the value that was provided on create.
func (u *CaseyInspectionsUpsert) UpdateDiskIo() *CaseyInspectionsUpsert {
	u.SetExcluded(caseyinspections.FieldDiskIo)
	return u
}

// SetRouter sets the "router" field.
func (u *CaseyInspectionsUpsert) SetRouter(v string) *CaseyInspectionsUpsert {
	u.Set(caseyinspections.FieldRouter, v)
	return u
}

// UpdateRouter sets the "router" field to the value that was provided on create.
func (u *CaseyInspectionsUpsert) UpdateRouter() *CaseyInspectionsUpsert {
	u.SetExcluded(caseyinspections.FieldRouter)
	return u
}

// SetNetStats sets the "net_stats" field.
func (u *CaseyInspectionsUpsert) SetNetStats(v string) *CaseyInspectionsUpsert {
	u.Set(caseyinspections.FieldNetStats, v)
	return u
}

// UpdateNetStats sets the "net_stats" field to the value that was provided on create.
func (u *CaseyInspectionsUpsert) UpdateNetStats() *CaseyInspectionsUpsert {
	u.SetExcluded(caseyinspections.FieldNetStats)
	return u
}

// SetProcesses sets the "processes" field.
func (u *CaseyInspectionsUpsert) SetProcesses(v int32) *CaseyInspectionsUpsert {
	u.Set(caseyinspections.FieldProcesses, v)
	return u
}

// UpdateProcesses sets the "processes" field to the value that was provided on create.
func (u *CaseyInspectionsUpsert) UpdateProcesses() *CaseyInspectionsUpsert {
	u.SetExcluded(caseyinspections.FieldProcesses)
	return u
}

// AddProcesses adds v to the "processes" field.
func (u *CaseyInspectionsUpsert) AddProcesses(v int32) *CaseyInspectionsUpsert {
	u.Add(caseyinspections.FieldProcesses, v)
	return u
}

// SetZombieProcs sets the "zombie_procs" field.
func (u *CaseyInspectionsUpsert) SetZombieProcs(v int32) *CaseyInspectionsUpsert {
	u.Set(caseyinspections.FieldZombieProcs, v)
	return u
}

// UpdateZombieProcs sets the "zombie_procs" field to the value that was provided on create.
func (u *CaseyInspectionsUpsert) UpdateZombieProcs() *CaseyInspectionsUpsert {
	u.SetExcluded(caseyinspections.FieldZombieProcs)
	return u
}

// AddZombieProcs adds v to the "zombie_procs" field.
func (u *CaseyInspectionsUpsert) AddZombieProcs(v int32) *CaseyInspectionsUpsert {
	u.Add(caseyinspections.FieldZombieProcs, v)
	return u
}

// SetTopProcesses sets the "top_processes" field.
func (u *CaseyInspectionsUpsert) SetTopProcesses(v string) *CaseyInspectionsUpsert {
	u.Set(caseyinspections.FieldTopProcesses, v)
	return u
}

// UpdateTopProcesses sets the "top_processes" field to the value that was provided on create.
func (u *CaseyInspectionsUpsert) UpdateTopProcesses() *CaseyInspectionsUpsert {
	u.SetExcluded(caseyinspections.FieldTopProcesses)
	return u
}

// SetEnv sets the "env" field.
func (u *CaseyInspectionsUpsert) SetEnv(v string) *CaseyInspectionsUpsert {
	u.Set(caseyinspections.FieldEnv, v)
	return u
}

// UpdateEnv sets the "env" field to the value that was provided on create.
func (u *CaseyInspectionsUpsert) UpdateEnv() *CaseyInspectionsUpsert {
	u.SetExcluded(caseyinspections.FieldEnv)
	return u
}

// ClearEnv clears the value of the "env" field.
func (u *CaseyInspectionsUpsert) ClearEnv() *CaseyInspectionsUpsert {
	u.SetNull(caseyinspections.FieldEnv)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *CaseyInspectionsUpsert) SetCreatedAt(v time.Time) *CaseyInspectionsUpsert {
	u.Set(caseyinspections.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CaseyInspectionsUpsert) UpdateCreatedAt() *CaseyInspectionsUpsert {
	u.SetExcluded(caseyinspections.FieldCreatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CaseyInspections.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(caseyinspections.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CaseyInspectionsUpsertOne) UpdateNewValues() *CaseyInspectionsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(caseyinspections.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CaseyInspections.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CaseyInspectionsUpsertOne) Ignore() *CaseyInspectionsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CaseyInspectionsUpsertOne) DoNothing() *CaseyInspectionsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CaseyInspectionsCreate.OnConflict
// documentation for more info.
func (u *CaseyInspectionsUpsertOne) Update(set func(*CaseyInspectionsUpsert)) *CaseyInspectionsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CaseyInspectionsUpsert{UpdateSet: update})
	}))
	return u
}

// SetTimestamp sets the "timestamp" field.
func (u *CaseyInspectionsUpsertOne) SetTimestamp(v string) *CaseyInspectionsUpsertOne {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.SetTimestamp(v)
	})
}

// UpdateTimestamp sets the "timestamp" field to the value that was provided on create.
func (u *CaseyInspectionsUpsertOne) UpdateTimestamp() *CaseyInspectionsUpsertOne {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.UpdateTimestamp()
	})
}

// SetHostname sets the "hostname" field.
func (u *CaseyInspectionsUpsertOne) SetHostname(v string) *CaseyInspectionsUpsertOne {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.SetHostname(v)
	})
}

// UpdateHostname sets the "hostname" field to the value that was provided on create.
func (u *CaseyInspectionsUpsertOne) UpdateHostname() *CaseyInspectionsUpsertOne {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.UpdateHostname()
	})
}

// SetIP sets the "ip" field.
func (u *CaseyInspectionsUpsertOne) SetIP(v string) *CaseyInspectionsUpsertOne {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.SetIP(v)
	})
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *CaseyInspectionsUpsertOne) UpdateIP() *CaseyInspectionsUpsertOne {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.UpdateIP()
	})
}

// SetOs sets the "os" field.
func (u *CaseyInspectionsUpsertOne) SetOs(v string) *CaseyInspectionsUpsertOne {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.SetOs(v)
	})
}

// UpdateOs sets the "os" field to the value that was provided on create.
func (u *CaseyInspectionsUpsertOne) UpdateOs() *CaseyInspectionsUpsertOne {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.UpdateOs()
	})
}

// SetUptime sets the "uptime" field.
func (u *CaseyInspectionsUpsertOne) SetUptime(v string) *CaseyInspectionsUpsertOne {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.SetUptime(v)
	})
}

// UpdateUptime sets the "uptime" field to the value that was provided on create.
func (u *CaseyInspectionsUpsertOne) UpdateUptime() *CaseyInspectionsUpsertOne {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.UpdateUptime()
	})
}

// SetCPU sets the "cpu" field.
func (u *CaseyInspectionsUpsertOne) SetCPU(v string) *CaseyInspectionsUpsertOne {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.SetCPU(v)
	})
}

// UpdateCPU sets the "cpu" field to the value that was provided on create.
func (u *CaseyInspectionsUpsertOne) UpdateCPU() *CaseyInspectionsUpsertOne {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.UpdateCPU()
	})
}

// SetCPULoad sets the "cpu_load" field.
func (u *CaseyInspectionsUpsertOne) SetCPULoad(v string) *CaseyInspectionsUpsertOne {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.SetCPULoad(v)
	})
}

// UpdateCPULoad sets the "cpu_load" field to the value that was provided on create.
func (u *CaseyInspectionsUpsertOne) UpdateCPULoad() *CaseyInspectionsUpsertOne {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.UpdateCPULoad()
	})
}

// SetMemory sets the "memory" field.
func (u *CaseyInspectionsUpsertOne) SetMemory(v string) *CaseyInspectionsUpsertOne {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.SetMemory(v)
	})
}

// UpdateMemory sets the "memory" field to the value that was provided on create.
func (u *CaseyInspectionsUpsertOne) UpdateMemory() *CaseyInspectionsUpsertOne {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.UpdateMemory()
	})
}

// SetDisk sets the "disk" field.
func (u *CaseyInspectionsUpsertOne) SetDisk(v string) *CaseyInspectionsUpsertOne {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.SetDisk(v)
	})
}

// UpdateDisk sets the "disk" field to the value that was provided on create.
func (u *CaseyInspectionsUpsertOne) UpdateDisk() *CaseyInspectionsUpsertOne {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.UpdateDisk()
	})
}

// SetDiskIo sets the "disk_io" field.
func (u *CaseyInspectionsUpsertOne) SetDiskIo(v string) *CaseyInspectionsUpsertOne {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.SetDiskIo(v)
	})
}

// UpdateDiskIo sets the "disk_io" field to the value that was provided on create.
func (u *CaseyInspectionsUpsertOne) UpdateDiskIo() *CaseyInspectionsUpsertOne {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.UpdateDiskIo()
	})
}

// SetRouter sets the "router" field.
func (u *CaseyInspectionsUpsertOne) SetRouter(v string) *CaseyInspectionsUpsertOne {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.SetRouter(v)
	})
}

// UpdateRouter sets the "router" field to the value that was provided on create.
func (u *CaseyInspectionsUpsertOne) UpdateRouter() *CaseyInspectionsUpsertOne {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.UpdateRouter()
	})
}

// SetNetStats sets the "net_stats" field.
func (u *CaseyInspectionsUpsertOne) SetNetStats(v string) *CaseyInspectionsUpsertOne {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.SetNetStats(v)
	})
}

// UpdateNetStats sets the "net_stats" field to the value that was provided on create.
func (u *CaseyInspectionsUpsertOne) UpdateNetStats() *CaseyInspectionsUpsertOne {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.UpdateNetStats()
	})
}

// SetProcesses sets the "processes" field.
func (u *CaseyInspectionsUpsertOne) SetProcesses(v int32) *CaseyInspectionsUpsertOne {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.SetProcesses(v)
	})
}

// AddProcesses adds v to the "processes" field.
func (u *CaseyInspectionsUpsertOne) AddProcesses(v int32) *CaseyInspectionsUpsertOne {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.AddProcesses(v)
	})
}

// UpdateProcesses sets the "processes" field to the value that was provided on create.
func (u *CaseyInspectionsUpsertOne) UpdateProcesses() *CaseyInspectionsUpsertOne {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.UpdateProcesses()
	})
}

// SetZombieProcs sets the "zombie_procs" field.
func (u *CaseyInspectionsUpsertOne) SetZombieProcs(v int32) *CaseyInspectionsUpsertOne {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.SetZombieProcs(v)
	})
}

// AddZombieProcs adds v to the "zombie_procs" field.
func (u *CaseyInspectionsUpsertOne) AddZombieProcs(v int32) *CaseyInspectionsUpsertOne {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.AddZombieProcs(v)
	})
}

// UpdateZombieProcs sets the "zombie_procs" field to the value that was provided on create.
func (u *CaseyInspectionsUpsertOne) UpdateZombieProcs() *CaseyInspectionsUpsertOne {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.UpdateZombieProcs()
	})
}

// SetTopProcesses sets the "top_processes" field.
func (u *CaseyInspectionsUpsertOne) SetTopProcesses(v string) *CaseyInspectionsUpsertOne {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.SetTopProcesses(v)
	})
}

// UpdateTopProcesses sets the "top_processes" field to the value that was provided on create.
func (u *CaseyInspectionsUpsertOne) UpdateTopProcesses() *CaseyInspectionsUpsertOne {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.UpdateTopProcesses()
	})
}

// SetEnv sets the "env" field.
func (u *CaseyInspectionsUpsertOne) SetEnv(v string) *CaseyInspectionsUpsertOne {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.SetEnv(v)
	})
}

// UpdateEnv sets the "env" field to the value that was provided on create.
func (u *CaseyInspectionsUpsertOne) UpdateEnv() *CaseyInspectionsUpsertOne {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.UpdateEnv()
	})
}

// ClearEnv clears the value of the "env" field.
func (u *CaseyInspectionsUpsertOne) ClearEnv() *CaseyInspectionsUpsertOne {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.ClearEnv()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *CaseyInspectionsUpsertOne) SetCreatedAt(v time.Time) *CaseyInspectionsUpsertOne {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CaseyInspectionsUpsertOne) UpdateCreatedAt() *CaseyInspectionsUpsertOne {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *CaseyInspectionsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CaseyInspectionsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CaseyInspectionsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CaseyInspectionsUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CaseyInspectionsUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CaseyInspectionsCreateBulk is the builder for creating many CaseyInspections entities in bulk.
type CaseyInspectionsCreateBulk struct {
	config
	err      error
	builders []*CaseyInspectionsCreate
	conflict []sql.ConflictOption
}

// Save creates the CaseyInspections entities in the database.
func (cicb *CaseyInspectionsCreateBulk) Save(ctx context.Context) ([]*CaseyInspections, error) {
	if cicb.err != nil {
		return nil, cicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cicb.builders))
	nodes := make([]*CaseyInspections, len(cicb.builders))
	mutators := make([]Mutator, len(cicb.builders))
	for i := range cicb.builders {
		func(i int, root context.Context) {
			builder := cicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CaseyInspectionsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cicb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cicb *CaseyInspectionsCreateBulk) SaveX(ctx context.Context) []*CaseyInspections {
	v, err := cicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cicb *CaseyInspectionsCreateBulk) Exec(ctx context.Context) error {
	_, err := cicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cicb *CaseyInspectionsCreateBulk) ExecX(ctx context.Context) {
	if err := cicb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CaseyInspections.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CaseyInspectionsUpsert) {
//			SetTimestamp(v+v).
//		}).
//		Exec(ctx)
func (cicb *CaseyInspectionsCreateBulk) OnConflict(opts ...sql.ConflictOption) *CaseyInspectionsUpsertBulk {
	cicb.conflict = opts
	return &CaseyInspectionsUpsertBulk{
		create: cicb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CaseyInspections.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cicb *CaseyInspectionsCreateBulk) OnConflictColumns(columns ...string) *CaseyInspectionsUpsertBulk {
	cicb.conflict = append(cicb.conflict, sql.ConflictColumns(columns...))
	return &CaseyInspectionsUpsertBulk{
		create: cicb,
	}
}

// CaseyInspectionsUpsertBulk is the builder for "upsert"-ing
// a bulk of CaseyInspections nodes.
type CaseyInspectionsUpsertBulk struct {
	create *CaseyInspectionsCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CaseyInspections.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(caseyinspections.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CaseyInspectionsUpsertBulk) UpdateNewValues() *CaseyInspectionsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(caseyinspections.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CaseyInspections.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CaseyInspectionsUpsertBulk) Ignore() *CaseyInspectionsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CaseyInspectionsUpsertBulk) DoNothing() *CaseyInspectionsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CaseyInspectionsCreateBulk.OnConflict
// documentation for more info.
func (u *CaseyInspectionsUpsertBulk) Update(set func(*CaseyInspectionsUpsert)) *CaseyInspectionsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CaseyInspectionsUpsert{UpdateSet: update})
	}))
	return u
}

// SetTimestamp sets the "timestamp" field.
func (u *CaseyInspectionsUpsertBulk) SetTimestamp(v string) *CaseyInspectionsUpsertBulk {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.SetTimestamp(v)
	})
}

// UpdateTimestamp sets the "timestamp" field to the value that was provided on create.
func (u *CaseyInspectionsUpsertBulk) UpdateTimestamp() *CaseyInspectionsUpsertBulk {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.UpdateTimestamp()
	})
}

// SetHostname sets the "hostname" field.
func (u *CaseyInspectionsUpsertBulk) SetHostname(v string) *CaseyInspectionsUpsertBulk {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.SetHostname(v)
	})
}

// UpdateHostname sets the "hostname" field to the value that was provided on create.
func (u *CaseyInspectionsUpsertBulk) UpdateHostname() *CaseyInspectionsUpsertBulk {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.UpdateHostname()
	})
}

// SetIP sets the "ip" field.
func (u *CaseyInspectionsUpsertBulk) SetIP(v string) *CaseyInspectionsUpsertBulk {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.SetIP(v)
	})
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *CaseyInspectionsUpsertBulk) UpdateIP() *CaseyInspectionsUpsertBulk {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.UpdateIP()
	})
}

// SetOs sets the "os" field.
func (u *CaseyInspectionsUpsertBulk) SetOs(v string) *CaseyInspectionsUpsertBulk {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.SetOs(v)
	})
}

// UpdateOs sets the "os" field to the value that was provided on create.
func (u *CaseyInspectionsUpsertBulk) UpdateOs() *CaseyInspectionsUpsertBulk {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.UpdateOs()
	})
}

// SetUptime sets the "uptime" field.
func (u *CaseyInspectionsUpsertBulk) SetUptime(v string) *CaseyInspectionsUpsertBulk {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.SetUptime(v)
	})
}

// UpdateUptime sets the "uptime" field to the value that was provided on create.
func (u *CaseyInspectionsUpsertBulk) UpdateUptime() *CaseyInspectionsUpsertBulk {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.UpdateUptime()
	})
}

// SetCPU sets the "cpu" field.
func (u *CaseyInspectionsUpsertBulk) SetCPU(v string) *CaseyInspectionsUpsertBulk {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.SetCPU(v)
	})
}

// UpdateCPU sets the "cpu" field to the value that was provided on create.
func (u *CaseyInspectionsUpsertBulk) UpdateCPU() *CaseyInspectionsUpsertBulk {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.UpdateCPU()
	})
}

// SetCPULoad sets the "cpu_load" field.
func (u *CaseyInspectionsUpsertBulk) SetCPULoad(v string) *CaseyInspectionsUpsertBulk {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.SetCPULoad(v)
	})
}

// UpdateCPULoad sets the "cpu_load" field to the value that was provided on create.
func (u *CaseyInspectionsUpsertBulk) UpdateCPULoad() *CaseyInspectionsUpsertBulk {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.UpdateCPULoad()
	})
}

// SetMemory sets the "memory" field.
func (u *CaseyInspectionsUpsertBulk) SetMemory(v string) *CaseyInspectionsUpsertBulk {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.SetMemory(v)
	})
}

// UpdateMemory sets the "memory" field to the value that was provided on create.
func (u *CaseyInspectionsUpsertBulk) UpdateMemory() *CaseyInspectionsUpsertBulk {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.UpdateMemory()
	})
}

// SetDisk sets the "disk" field.
func (u *CaseyInspectionsUpsertBulk) SetDisk(v string) *CaseyInspectionsUpsertBulk {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.SetDisk(v)
	})
}

// UpdateDisk sets the "disk" field to the value that was provided on create.
func (u *CaseyInspectionsUpsertBulk) UpdateDisk() *CaseyInspectionsUpsertBulk {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.UpdateDisk()
	})
}

// SetDiskIo sets the "disk_io" field.
func (u *CaseyInspectionsUpsertBulk) SetDiskIo(v string) *CaseyInspectionsUpsertBulk {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.SetDiskIo(v)
	})
}

// UpdateDiskIo sets the "disk_io" field to the value that was provided on create.
func (u *CaseyInspectionsUpsertBulk) UpdateDiskIo() *CaseyInspectionsUpsertBulk {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.UpdateDiskIo()
	})
}

// SetRouter sets the "router" field.
func (u *CaseyInspectionsUpsertBulk) SetRouter(v string) *CaseyInspectionsUpsertBulk {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.SetRouter(v)
	})
}

// UpdateRouter sets the "router" field to the value that was provided on create.
func (u *CaseyInspectionsUpsertBulk) UpdateRouter() *CaseyInspectionsUpsertBulk {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.UpdateRouter()
	})
}

// SetNetStats sets the "net_stats" field.
func (u *CaseyInspectionsUpsertBulk) SetNetStats(v string) *CaseyInspectionsUpsertBulk {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.SetNetStats(v)
	})
}

// UpdateNetStats sets the "net_stats" field to the value that was provided on create.
func (u *CaseyInspectionsUpsertBulk) UpdateNetStats() *CaseyInspectionsUpsertBulk {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.UpdateNetStats()
	})
}

// SetProcesses sets the "processes" field.
func (u *CaseyInspectionsUpsertBulk) SetProcesses(v int32) *CaseyInspectionsUpsertBulk {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.SetProcesses(v)
	})
}

// AddProcesses adds v to the "processes" field.
func (u *CaseyInspectionsUpsertBulk) AddProcesses(v int32) *CaseyInspectionsUpsertBulk {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.AddProcesses(v)
	})
}

// UpdateProcesses sets the "processes" field to the value that was provided on create.
func (u *CaseyInspectionsUpsertBulk) UpdateProcesses() *CaseyInspectionsUpsertBulk {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.UpdateProcesses()
	})
}

// SetZombieProcs sets the "zombie_procs" field.
func (u *CaseyInspectionsUpsertBulk) SetZombieProcs(v int32) *CaseyInspectionsUpsertBulk {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.SetZombieProcs(v)
	})
}

// AddZombieProcs adds v to the "zombie_procs" field.
func (u *CaseyInspectionsUpsertBulk) AddZombieProcs(v int32) *CaseyInspectionsUpsertBulk {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.AddZombieProcs(v)
	})
}

// UpdateZombieProcs sets the "zombie_procs" field to the value that was provided on create.
func (u *CaseyInspectionsUpsertBulk) UpdateZombieProcs() *CaseyInspectionsUpsertBulk {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.UpdateZombieProcs()
	})
}

// SetTopProcesses sets the "top_processes" field.
func (u *CaseyInspectionsUpsertBulk) SetTopProcesses(v string) *CaseyInspectionsUpsertBulk {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.SetTopProcesses(v)
	})
}

// UpdateTopProcesses sets the "top_processes" field to the value that was provided on create.
func (u *CaseyInspectionsUpsertBulk) UpdateTopProcesses() *CaseyInspectionsUpsertBulk {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.UpdateTopProcesses()
	})
}

// SetEnv sets the "env" field.
func (u *CaseyInspectionsUpsertBulk) SetEnv(v string) *CaseyInspectionsUpsertBulk {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.SetEnv(v)
	})
}

// UpdateEnv sets the "env" field to the value that was provided on create.
func (u *CaseyInspectionsUpsertBulk) UpdateEnv() *CaseyInspectionsUpsertBulk {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.UpdateEnv()
	})
}

// ClearEnv clears the value of the "env" field.
func (u *CaseyInspectionsUpsertBulk) ClearEnv() *CaseyInspectionsUpsertBulk {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.ClearEnv()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *CaseyInspectionsUpsertBulk) SetCreatedAt(v time.Time) *CaseyInspectionsUpsertBulk {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CaseyInspectionsUpsertBulk) UpdateCreatedAt() *CaseyInspectionsUpsertBulk {
	return u.Update(func(s *CaseyInspectionsUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *CaseyInspectionsUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CaseyInspectionsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CaseyInspectionsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CaseyInspectionsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
