// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/youxihu/casey/internal/data/ent/caseyinspections"
	"github.com/youxihu/casey/internal/data/ent/caseytrigger"
	"github.com/youxihu/casey/internal/data/ent/predicate"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCaseyInspections = "CaseyInspections"
	TypeCaseyTrigger     = "CaseyTrigger"
)

// CaseyInspectionsMutation represents an operation that mutates the CaseyInspections nodes in the graph.
type CaseyInspectionsMutation struct {
	config
	op              Op
	typ             string
	id              *int64
	timestamp       *string
	hostname        *string
	ip              *string
	os              *string
	uptime          *string
	cpu             *string
	cpu_load        *string
	memory          *string
	disk            *string
	disk_io         *string
	router          *string
	net_stats       *string
	processes       *int32
	addprocesses    *int32
	zombie_procs    *int32
	addzombie_procs *int32
	top_processes   *string
	env             *string
	created_at      *time.Time
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*CaseyInspections, error)
	predicates      []predicate.CaseyInspections
}

var _ ent.Mutation = (*CaseyInspectionsMutation)(nil)

// caseyinspectionsOption allows management of the mutation configuration using functional options.
type caseyinspectionsOption func(*CaseyInspectionsMutation)

// newCaseyInspectionsMutation creates new mutation for the CaseyInspections entity.
func newCaseyInspectionsMutation(c config, op Op, opts ...caseyinspectionsOption) *CaseyInspectionsMutation {
	m := &CaseyInspectionsMutation{
		config:        c,
		op:            op,
		typ:           TypeCaseyInspections,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCaseyInspectionsID sets the ID field of the mutation.
func withCaseyInspectionsID(id int64) caseyinspectionsOption {
	return func(m *CaseyInspectionsMutation) {
		var (
			err   error
			once  sync.Once
			value *CaseyInspections
		)
		m.oldValue = func(ctx context.Context) (*CaseyInspections, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CaseyInspections.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCaseyInspections sets the old CaseyInspections of the mutation.
func withCaseyInspections(node *CaseyInspections) caseyinspectionsOption {
	return func(m *CaseyInspectionsMutation) {
		m.oldValue = func(context.Context) (*CaseyInspections, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CaseyInspectionsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CaseyInspectionsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CaseyInspections entities.
func (m *CaseyInspectionsMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CaseyInspectionsMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CaseyInspectionsMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CaseyInspections.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTimestamp sets the "timestamp" field.
func (m *CaseyInspectionsMutation) SetTimestamp(s string) {
	m.timestamp = &s
}

// Timestamp returns the value of the "timestamp" field in the mutation.
func (m *CaseyInspectionsMutation) Timestamp() (r string, exists bool) {
	v := m.timestamp
	if v == nil {
		return
	}
	return *v, true
}

// OldTimestamp returns the old "timestamp" field's value of the CaseyInspections entity.
// If the CaseyInspections object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CaseyInspectionsMutation) OldTimestamp(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimestamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimestamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimestamp: %w", err)
	}
	return oldValue.Timestamp, nil
}

// ResetTimestamp resets all changes to the "timestamp" field.
func (m *CaseyInspectionsMutation) ResetTimestamp() {
	m.timestamp = nil
}

// SetHostname sets the "hostname" field.
func (m *CaseyInspectionsMutation) SetHostname(s string) {
	m.hostname = &s
}

// Hostname returns the value of the "hostname" field in the mutation.
func (m *CaseyInspectionsMutation) Hostname() (r string, exists bool) {
	v := m.hostname
	if v == nil {
		return
	}
	return *v, true
}

// OldHostname returns the old "hostname" field's value of the CaseyInspections entity.
// If the CaseyInspections object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CaseyInspectionsMutation) OldHostname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHostname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHostname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHostname: %w", err)
	}
	return oldValue.Hostname, nil
}

// ResetHostname resets all changes to the "hostname" field.
func (m *CaseyInspectionsMutation) ResetHostname() {
	m.hostname = nil
}

// SetIP sets the "ip" field.
func (m *CaseyInspectionsMutation) SetIP(s string) {
	m.ip = &s
}

// IP returns the value of the "ip" field in the mutation.
func (m *CaseyInspectionsMutation) IP() (r string, exists bool) {
	v := m.ip
	if v == nil {
		return
	}
	return *v, true
}

// OldIP returns the old "ip" field's value of the CaseyInspections entity.
// If the CaseyInspections object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CaseyInspectionsMutation) OldIP(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIP is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIP requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIP: %w", err)
	}
	return oldValue.IP, nil
}

// ResetIP resets all changes to the "ip" field.
func (m *CaseyInspectionsMutation) ResetIP() {
	m.ip = nil
}

// SetOs sets the "os" field.
func (m *CaseyInspectionsMutation) SetOs(s string) {
	m.os = &s
}

// Os returns the value of the "os" field in the mutation.
func (m *CaseyInspectionsMutation) Os() (r string, exists bool) {
	v := m.os
	if v == nil {
		return
	}
	return *v, true
}

// OldOs returns the old "os" field's value of the CaseyInspections entity.
// If the CaseyInspections object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CaseyInspectionsMutation) OldOs(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOs is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOs requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOs: %w", err)
	}
	return oldValue.Os, nil
}

// ResetOs resets all changes to the "os" field.
func (m *CaseyInspectionsMutation) ResetOs() {
	m.os = nil
}

// SetUptime sets the "uptime" field.
func (m *CaseyInspectionsMutation) SetUptime(s string) {
	m.uptime = &s
}

// Uptime returns the value of the "uptime" field in the mutation.
func (m *CaseyInspectionsMutation) Uptime() (r string, exists bool) {
	v := m.uptime
	if v == nil {
		return
	}
	return *v, true
}

// OldUptime returns the old "uptime" field's value of the CaseyInspections entity.
// If the CaseyInspections object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CaseyInspectionsMutation) OldUptime(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUptime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUptime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUptime: %w", err)
	}
	return oldValue.Uptime, nil
}

// ResetUptime resets all changes to the "uptime" field.
func (m *CaseyInspectionsMutation) ResetUptime() {
	m.uptime = nil
}

// SetCPU sets the "cpu" field.
func (m *CaseyInspectionsMutation) SetCPU(s string) {
	m.cpu = &s
}

// CPU returns the value of the "cpu" field in the mutation.
func (m *CaseyInspectionsMutation) CPU() (r string, exists bool) {
	v := m.cpu
	if v == nil {
		return
	}
	return *v, true
}

// OldCPU returns the old "cpu" field's value of the CaseyInspections entity.
// If the CaseyInspections object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CaseyInspectionsMutation) OldCPU(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCPU is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCPU requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCPU: %w", err)
	}
	return oldValue.CPU, nil
}

// ResetCPU resets all changes to the "cpu" field.
func (m *CaseyInspectionsMutation) ResetCPU() {
	m.cpu = nil
}

// SetCPULoad sets the "cpu_load" field.
func (m *CaseyInspectionsMutation) SetCPULoad(s string) {
	m.cpu_load = &s
}

// CPULoad returns the value of the "cpu_load" field in the mutation.
func (m *CaseyInspectionsMutation) CPULoad() (r string, exists bool) {
	v := m.cpu_load
	if v == nil {
		return
	}
	return *v, true
}

// OldCPULoad returns the old "cpu_load" field's value of the CaseyInspections entity.
// If the CaseyInspections object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CaseyInspectionsMutation) OldCPULoad(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCPULoad is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCPULoad requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCPULoad: %w", err)
	}
	return oldValue.CPULoad, nil
}

// ResetCPULoad resets all changes to the "cpu_load" field.
func (m *CaseyInspectionsMutation) ResetCPULoad() {
	m.cpu_load = nil
}

// SetMemory sets the "memory" field.
func (m *CaseyInspectionsMutation) SetMemory(s string) {
	m.memory = &s
}

// Memory returns the value of the "memory" field in the mutation.
func (m *CaseyInspectionsMutation) Memory() (r string, exists bool) {
	v := m.memory
	if v == nil {
		return
	}
	return *v, true
}

// OldMemory returns the old "memory" field's value of the CaseyInspections entity.
// If the CaseyInspections object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CaseyInspectionsMutation) OldMemory(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMemory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMemory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMemory: %w", err)
	}
	return oldValue.Memory, nil
}

// ResetMemory resets all changes to the "memory" field.
func (m *CaseyInspectionsMutation) ResetMemory() {
	m.memory = nil
}

// SetDisk sets the "disk" field.
func (m *CaseyInspectionsMutation) SetDisk(s string) {
	m.disk = &s
}

// Disk returns the value of the "disk" field in the mutation.
func (m *CaseyInspectionsMutation) Disk() (r string, exists bool) {
	v := m.disk
	if v == nil {
		return
	}
	return *v, true
}

// OldDisk returns the old "disk" field's value of the CaseyInspections entity.
// If the CaseyInspections object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CaseyInspectionsMutation) OldDisk(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisk is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisk requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisk: %w", err)
	}
	return oldValue.Disk, nil
}

// ResetDisk resets all changes to the "disk" field.
func (m *CaseyInspectionsMutation) ResetDisk() {
	m.disk = nil
}

// SetDiskIo sets the "disk_io" field.
func (m *CaseyInspectionsMutation) SetDiskIo(s string) {
	m.disk_io = &s
}

// DiskIo returns the value of the "disk_io" field in the mutation.
func (m *CaseyInspectionsMutation) DiskIo() (r string, exists bool) {
	v := m.disk_io
	if v == nil {
		return
	}
	return *v, true
}

// OldDiskIo returns the old "disk_io" field's value of the CaseyInspections entity.
// If the CaseyInspections object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CaseyInspectionsMutation) OldDiskIo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDiskIo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDiskIo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDiskIo: %w", err)
	}
	return oldValue.DiskIo, nil
}

// ResetDiskIo resets all changes to the "disk_io" field.
func (m *CaseyInspectionsMutation) ResetDiskIo() {
	m.disk_io = nil
}

// SetRouter sets the "router" field.
func (m *CaseyInspectionsMutation) SetRouter(s string) {
	m.router = &s
}

// Router returns the value of the "router" field in the mutation.
func (m *CaseyInspectionsMutation) Router() (r string, exists bool) {
	v := m.router
	if v == nil {
		return
	}
	return *v, true
}

// OldRouter returns the old "router" field's value of the CaseyInspections entity.
// If the CaseyInspections object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CaseyInspectionsMutation) OldRouter(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRouter is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRouter requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRouter: %w", err)
	}
	return oldValue.Router, nil
}

// ResetRouter resets all changes to the "router" field.
func (m *CaseyInspectionsMutation) ResetRouter() {
	m.router = nil
}

// SetNetStats sets the "net_stats" field.
func (m *CaseyInspectionsMutation) SetNetStats(s string) {
	m.net_stats = &s
}

// NetStats returns the value of the "net_stats" field in the mutation.
func (m *CaseyInspectionsMutation) NetStats() (r string, exists bool) {
	v := m.net_stats
	if v == nil {
		return
	}
	return *v, true
}

// OldNetStats returns the old "net_stats" field's value of the CaseyInspections entity.
// If the CaseyInspections object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CaseyInspectionsMutation) OldNetStats(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNetStats is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNetStats requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNetStats: %w", err)
	}
	return oldValue.NetStats, nil
}

// ResetNetStats resets all changes to the "net_stats" field.
func (m *CaseyInspectionsMutation) ResetNetStats() {
	m.net_stats = nil
}

// SetProcesses sets the "processes" field.
func (m *CaseyInspectionsMutation) SetProcesses(i int32) {
	m.processes = &i
	m.addprocesses = nil
}

// Processes returns the value of the "processes" field in the mutation.
func (m *CaseyInspectionsMutation) Processes() (r int32, exists bool) {
	v := m.processes
	if v == nil {
		return
	}
	return *v, true
}

// OldProcesses returns the old "processes" field's value of the CaseyInspections entity.
// If the CaseyInspections object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CaseyInspectionsMutation) OldProcesses(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProcesses is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProcesses requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProcesses: %w", err)
	}
	return oldValue.Processes, nil
}

// AddProcesses adds i to the "processes" field.
func (m *CaseyInspectionsMutation) AddProcesses(i int32) {
	if m.addprocesses != nil {
		*m.addprocesses += i
	} else {
		m.addprocesses = &i
	}
}

// AddedProcesses returns the value that was added to the "processes" field in this mutation.
func (m *CaseyInspectionsMutation) AddedProcesses() (r int32, exists bool) {
	v := m.addprocesses
	if v == nil {
		return
	}
	return *v, true
}

// ResetProcesses resets all changes to the "processes" field.
func (m *CaseyInspectionsMutation) ResetProcesses() {
	m.processes = nil
	m.addprocesses = nil
}

// SetZombieProcs sets the "zombie_procs" field.
func (m *CaseyInspectionsMutation) SetZombieProcs(i int32) {
	m.zombie_procs = &i
	m.addzombie_procs = nil
}

// ZombieProcs returns the value of the "zombie_procs" field in the mutation.
func (m *CaseyInspectionsMutation) ZombieProcs() (r int32, exists bool) {
	v := m.zombie_procs
	if v == nil {
		return
	}
	return *v, true
}

// OldZombieProcs returns the old "zombie_procs" field's value of the CaseyInspections entity.
// If the CaseyInspections object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CaseyInspectionsMutation) OldZombieProcs(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldZombieProcs is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldZombieProcs requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldZombieProcs: %w", err)
	}
	return oldValue.ZombieProcs, nil
}

// AddZombieProcs adds i to the "zombie_procs" field.
func (m *CaseyInspectionsMutation) AddZombieProcs(i int32) {
	if m.addzombie_procs != nil {
		*m.addzombie_procs += i
	} else {
		m.addzombie_procs = &i
	}
}

// AddedZombieProcs returns the value that was added to the "zombie_procs" field in this mutation.
func (m *CaseyInspectionsMutation) AddedZombieProcs() (r int32, exists bool) {
	v := m.addzombie_procs
	if v == nil {
		return
	}
	return *v, true
}

// ResetZombieProcs resets all changes to the "zombie_procs" field.
func (m *CaseyInspectionsMutation) ResetZombieProcs() {
	m.zombie_procs = nil
	m.addzombie_procs = nil
}

// SetTopProcesses sets the "top_processes" field.
func (m *CaseyInspectionsMutation) SetTopProcesses(s string) {
	m.top_processes = &s
}

// TopProcesses returns the value of the "top_processes" field in the mutation.
func (m *CaseyInspectionsMutation) TopProcesses() (r string, exists bool) {
	v := m.top_processes
	if v == nil {
		return
	}
	return *v, true
}

// OldTopProcesses returns the old "top_processes" field's value of the CaseyInspections entity.
// If the CaseyInspections object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CaseyInspectionsMutation) OldTopProcesses(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTopProcesses is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTopProcesses requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTopProcesses: %w", err)
	}
	return oldValue.TopProcesses, nil
}

// ResetTopProcesses resets all changes to the "top_processes" field.
func (m *CaseyInspectionsMutation) ResetTopProcesses() {
	m.top_processes = nil
}

// SetEnv sets the "env" field.
func (m *CaseyInspectionsMutation) SetEnv(s string) {
	m.env = &s
}

// Env returns the value of the "env" field in the mutation.
func (m *CaseyInspectionsMutation) Env() (r string, exists bool) {
	v := m.env
	if v == nil {
		return
	}
	return *v, true
}

// OldEnv returns the old "env" field's value of the CaseyInspections entity.
// If the CaseyInspections object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CaseyInspectionsMutation) OldEnv(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnv is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnv requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnv: %w", err)
	}
	return oldValue.Env, nil
}

// ClearEnv clears the value of the "env" field.
func (m *CaseyInspectionsMutation) ClearEnv() {
	m.env = nil
	m.clearedFields[caseyinspections.FieldEnv] = struct{}{}
}

// EnvCleared returns if the "env" field was cleared in this mutation.
func (m *CaseyInspectionsMutation) EnvCleared() bool {
	_, ok := m.clearedFields[caseyinspections.FieldEnv]
	return ok
}

// ResetEnv resets all changes to the "env" field.
func (m *CaseyInspectionsMutation) ResetEnv() {
	m.env = nil
	delete(m.clearedFields, caseyinspections.FieldEnv)
}

// SetCreatedAt sets the "created_at" field.
func (m *CaseyInspectionsMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CaseyInspectionsMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the CaseyInspections entity.
// If the CaseyInspections object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CaseyInspectionsMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CaseyInspectionsMutation) ResetCreatedAt() {
	m.created_at = nil
}

// Where appends a list predicates to the CaseyInspectionsMutation builder.
func (m *CaseyInspectionsMutation) Where(ps ...predicate.CaseyInspections) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CaseyInspectionsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CaseyInspectionsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CaseyInspections, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CaseyInspectionsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CaseyInspectionsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CaseyInspections).
func (m *CaseyInspectionsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CaseyInspectionsMutation) Fields() []string {
	fields := make([]string, 0, 17)
	if m.timestamp != nil {
		fields = append(fields, caseyinspections.FieldTimestamp)
	}
	if m.hostname != nil {
		fields = append(fields, caseyinspections.FieldHostname)
	}
	if m.ip != nil {
		fields = append(fields, caseyinspections.FieldIP)
	}
	if m.os != nil {
		fields = append(fields, caseyinspections.FieldOs)
	}
	if m.uptime != nil {
		fields = append(fields, caseyinspections.FieldUptime)
	}
	if m.cpu != nil {
		fields = append(fields, caseyinspections.FieldCPU)
	}
	if m.cpu_load != nil {
		fields = append(fields, caseyinspections.FieldCPULoad)
	}
	if m.memory != nil {
		fields = append(fields, caseyinspections.FieldMemory)
	}
	if m.disk != nil {
		fields = append(fields, caseyinspections.FieldDisk)
	}
	if m.disk_io != nil {
		fields = append(fields, caseyinspections.FieldDiskIo)
	}
	if m.router != nil {
		fields = append(fields, caseyinspections.FieldRouter)
	}
	if m.net_stats != nil {
		fields = append(fields, caseyinspections.FieldNetStats)
	}
	if m.processes != nil {
		fields = append(fields, caseyinspections.FieldProcesses)
	}
	if m.zombie_procs != nil {
		fields = append(fields, caseyinspections.FieldZombieProcs)
	}
	if m.top_processes != nil {
		fields = append(fields, caseyinspections.FieldTopProcesses)
	}
	if m.env != nil {
		fields = append(fields, caseyinspections.FieldEnv)
	}
	if m.created_at != nil {
		fields = append(fields, caseyinspections.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CaseyInspectionsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case caseyinspections.FieldTimestamp:
		return m.Timestamp()
	case caseyinspections.FieldHostname:
		return m.Hostname()
	case caseyinspections.FieldIP:
		return m.IP()
	case caseyinspections.FieldOs:
		return m.Os()
	case caseyinspections.FieldUptime:
		return m.Uptime()
	case caseyinspections.FieldCPU:
		return m.CPU()
	case caseyinspections.FieldCPULoad:
		return m.CPULoad()
	case caseyinspections.FieldMemory:
		return m.Memory()
	case caseyinspections.FieldDisk:
		return m.Disk()
	case caseyinspections.FieldDiskIo:
		return m.DiskIo()
	case caseyinspections.FieldRouter:
		return m.Router()
	case caseyinspections.FieldNetStats:
		return m.NetStats()
	case caseyinspections.FieldProcesses:
		return m.Processes()
	case caseyinspections.FieldZombieProcs:
		return m.ZombieProcs()
	case caseyinspections.FieldTopProcesses:
		return m.TopProcesses()
	case caseyinspections.FieldEnv:
		return m.Env()
	case caseyinspections.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CaseyInspectionsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case caseyinspections.FieldTimestamp:
		return m.OldTimestamp(ctx)
	case caseyinspections.FieldHostname:
		return m.OldHostname(ctx)
	case caseyinspections.FieldIP:
		return m.OldIP(ctx)
	case caseyinspections.FieldOs:
		return m.OldOs(ctx)
	case caseyinspections.FieldUptime:
		return m.OldUptime(ctx)
	case caseyinspections.FieldCPU:
		return m.OldCPU(ctx)
	case caseyinspections.FieldCPULoad:
		return m.OldCPULoad(ctx)
	case caseyinspections.FieldMemory:
		return m.OldMemory(ctx)
	case caseyinspections.FieldDisk:
		return m.OldDisk(ctx)
	case caseyinspections.FieldDiskIo:
		return m.OldDiskIo(ctx)
	case caseyinspections.FieldRouter:
		return m.OldRouter(ctx)
	case caseyinspections.FieldNetStats:
		return m.OldNetStats(ctx)
	case caseyinspections.FieldProcesses:
		return m.OldProcesses(ctx)
	case caseyinspections.FieldZombieProcs:
		return m.OldZombieProcs(ctx)
	case caseyinspections.FieldTopProcesses:
		return m.OldTopProcesses(ctx)
	case caseyinspections.FieldEnv:
		return m.OldEnv(ctx)
	case caseyinspections.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown CaseyInspections field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CaseyInspectionsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case caseyinspections.FieldTimestamp:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimestamp(v)
		return nil
	case caseyinspections.FieldHostname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHostname(v)
		return nil
	case caseyinspections.FieldIP:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIP(v)
		return nil
	case caseyinspections.FieldOs:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOs(v)
		return nil
	case caseyinspections.FieldUptime:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUptime(v)
		return nil
	case caseyinspections.FieldCPU:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCPU(v)
		return nil
	case caseyinspections.FieldCPULoad:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCPULoad(v)
		return nil
	case caseyinspections.FieldMemory:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMemory(v)
		return nil
	case caseyinspections.FieldDisk:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisk(v)
		return nil
	case caseyinspections.FieldDiskIo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDiskIo(v)
		return nil
	case caseyinspections.FieldRouter:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRouter(v)
		return nil
	case caseyinspections.FieldNetStats:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNetStats(v)
		return nil
	case caseyinspections.FieldProcesses:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProcesses(v)
		return nil
	case caseyinspections.FieldZombieProcs:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetZombieProcs(v)
		return nil
	case caseyinspections.FieldTopProcesses:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTopProcesses(v)
		return nil
	case caseyinspections.FieldEnv:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnv(v)
		return nil
	case caseyinspections.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown CaseyInspections field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CaseyInspectionsMutation) AddedFields() []string {
	var fields []string
	if m.addprocesses != nil {
		fields = append(fields, caseyinspections.FieldProcesses)
	}
	if m.addzombie_procs != nil {
		fields = append(fields, caseyinspections.FieldZombieProcs)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CaseyInspectionsMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case caseyinspections.FieldProcesses:
		return m.AddedProcesses()
	case caseyinspections.FieldZombieProcs:
		return m.AddedZombieProcs()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CaseyInspectionsMutation) AddField(name string, value ent.Value) error {
	switch name {
	case caseyinspections.FieldProcesses:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddProcesses(v)
		return nil
	case caseyinspections.FieldZombieProcs:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddZombieProcs(v)
		return nil
	}
	return fmt.Errorf("unknown CaseyInspections numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CaseyInspectionsMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(caseyinspections.FieldEnv) {
		fields = append(fields, caseyinspections.FieldEnv)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CaseyInspectionsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CaseyInspectionsMutation) ClearField(name string) error {
	switch name {
	case caseyinspections.FieldEnv:
		m.ClearEnv()
		return nil
	}
	return fmt.Errorf("unknown CaseyInspections nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CaseyInspectionsMutation) ResetField(name string) error {
	switch name {
	case caseyinspections.FieldTimestamp:
		m.ResetTimestamp()
		return nil
	case caseyinspections.FieldHostname:
		m.ResetHostname()
		return nil
	case caseyinspections.FieldIP:
		m.ResetIP()
		return nil
	case caseyinspections.FieldOs:
		m.ResetOs()
		return nil
	case caseyinspections.FieldUptime:
		m.ResetUptime()
		return nil
	case caseyinspections.FieldCPU:
		m.ResetCPU()
		return nil
	case caseyinspections.FieldCPULoad:
		m.ResetCPULoad()
		return nil
	case caseyinspections.FieldMemory:
		m.ResetMemory()
		return nil
	case caseyinspections.FieldDisk:
		m.ResetDisk()
		return nil
	case caseyinspections.FieldDiskIo:
		m.ResetDiskIo()
		return nil
	case caseyinspections.FieldRouter:
		m.ResetRouter()
		return nil
	case caseyinspections.FieldNetStats:
		m.ResetNetStats()
		return nil
	case caseyinspections.FieldProcesses:
		m.ResetProcesses()
		return nil
	case caseyinspections.FieldZombieProcs:
		m.ResetZombieProcs()
		return nil
	case caseyinspections.FieldTopProcesses:
		m.ResetTopProcesses()
		return nil
	case caseyinspections.FieldEnv:
		m.ResetEnv()
		return nil
	case caseyinspections.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown CaseyInspections field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CaseyInspectionsMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CaseyInspectionsMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CaseyInspectionsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CaseyInspectionsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CaseyInspectionsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CaseyInspectionsMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CaseyInspectionsMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CaseyInspections unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CaseyInspectionsMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CaseyInspections edge %s", name)
}

// CaseyTriggerMutation represents an operation that mutates the CaseyTrigger nodes in the graph.
type CaseyTriggerMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	executor      *string
	hostname      *string
	command       *string
	response      *string
	executed_at   *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*CaseyTrigger, error)
	predicates    []predicate.CaseyTrigger
}

var _ ent.Mutation = (*CaseyTriggerMutation)(nil)

// caseytriggerOption allows management of the mutation configuration using functional options.
type caseytriggerOption func(*CaseyTriggerMutation)

// newCaseyTriggerMutation creates new mutation for the CaseyTrigger entity.
func newCaseyTriggerMutation(c config, op Op, opts ...caseytriggerOption) *CaseyTriggerMutation {
	m := &CaseyTriggerMutation{
		config:        c,
		op:            op,
		typ:           TypeCaseyTrigger,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCaseyTriggerID sets the ID field of the mutation.
func withCaseyTriggerID(id int64) caseytriggerOption {
	return func(m *CaseyTriggerMutation) {
		var (
			err   error
			once  sync.Once
			value *CaseyTrigger
		)
		m.oldValue = func(ctx context.Context) (*CaseyTrigger, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CaseyTrigger.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCaseyTrigger sets the old CaseyTrigger of the mutation.
func withCaseyTrigger(node *CaseyTrigger) caseytriggerOption {
	return func(m *CaseyTriggerMutation) {
		m.oldValue = func(context.Context) (*CaseyTrigger, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CaseyTriggerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CaseyTriggerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CaseyTrigger entities.
func (m *CaseyTriggerMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CaseyTriggerMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CaseyTriggerMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CaseyTrigger.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetExecutor sets the "executor" field.
func (m *CaseyTriggerMutation) SetExecutor(s string) {
	m.executor = &s
}

// Executor returns the value of the "executor" field in the mutation.
func (m *CaseyTriggerMutation) Executor() (r string, exists bool) {
	v := m.executor
	if v == nil {
		return
	}
	return *v, true
}

// OldExecutor returns the old "executor" field's value of the CaseyTrigger entity.
// If the CaseyTrigger object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CaseyTriggerMutation) OldExecutor(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExecutor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExecutor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExecutor: %w", err)
	}
	return oldValue.Executor, nil
}

// ResetExecutor resets all changes to the "executor" field.
func (m *CaseyTriggerMutation) ResetExecutor() {
	m.executor = nil
}

// SetHostname sets the "hostname" field.
func (m *CaseyTriggerMutation) SetHostname(s string) {
	m.hostname = &s
}

// Hostname returns the value of the "hostname" field in the mutation.
func (m *CaseyTriggerMutation) Hostname() (r string, exists bool) {
	v := m.hostname
	if v == nil {
		return
	}
	return *v, true
}

// OldHostname returns the old "hostname" field's value of the CaseyTrigger entity.
// If the CaseyTrigger object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CaseyTriggerMutation) OldHostname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHostname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHostname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHostname: %w", err)
	}
	return oldValue.Hostname, nil
}

// ResetHostname resets all changes to the "hostname" field.
func (m *CaseyTriggerMutation) ResetHostname() {
	m.hostname = nil
}

// SetCommand sets the "command" field.
func (m *CaseyTriggerMutation) SetCommand(s string) {
	m.command = &s
}

// Command returns the value of the "command" field in the mutation.
func (m *CaseyTriggerMutation) Command() (r string, exists bool) {
	v := m.command
	if v == nil {
		return
	}
	return *v, true
}

// OldCommand returns the old "command" field's value of the CaseyTrigger entity.
// If the CaseyTrigger object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CaseyTriggerMutation) OldCommand(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCommand is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCommand requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCommand: %w", err)
	}
	return oldValue.Command, nil
}

// ResetCommand resets all changes to the "command" field.
func (m *CaseyTriggerMutation) ResetCommand() {
	m.command = nil
}

// SetResponse sets the "response" field.
func (m *CaseyTriggerMutation) SetResponse(s string) {
	m.response = &s
}

// Response returns the value of the "response" field in the mutation.
func (m *CaseyTriggerMutation) Response() (r string, exists bool) {
	v := m.response
	if v == nil {
		return
	}
	return *v, true
}

// OldResponse returns the old "response" field's value of the CaseyTrigger entity.
// If the CaseyTrigger object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CaseyTriggerMutation) OldResponse(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResponse is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResponse requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResponse: %w", err)
	}
	return oldValue.Response, nil
}

// ClearResponse clears the value of the "response" field.
func (m *CaseyTriggerMutation) ClearResponse() {
	m.response = nil
	m.clearedFields[caseytrigger.FieldResponse] = struct{}{}
}

// ResponseCleared returns if the "response" field was cleared in this mutation.
func (m *CaseyTriggerMutation) ResponseCleared() bool {
	_, ok := m.clearedFields[caseytrigger.FieldResponse]
	return ok
}

// ResetResponse resets all changes to the "response" field.
func (m *CaseyTriggerMutation) ResetResponse() {
	m.response = nil
	delete(m.clearedFields, caseytrigger.FieldResponse)
}

// SetExecutedAt sets the "executed_at" field.
func (m *CaseyTriggerMutation) SetExecutedAt(t time.Time) {
	m.executed_at = &t
}

// ExecutedAt returns the value of the "executed_at" field in the mutation.
func (m *CaseyTriggerMutation) ExecutedAt() (r time.Time, exists bool) {
	v := m.executed_at
	if v == nil {
		return
	}
	return *v, true
}

// OldExecutedAt returns the old "executed_at" field's value of the CaseyTrigger entity.
// If the CaseyTrigger object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CaseyTriggerMutation) OldExecutedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExecutedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExecutedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExecutedAt: %w", err)
	}
	return oldValue.ExecutedAt, nil
}

// ClearExecutedAt clears the value of the "executed_at" field.
func (m *CaseyTriggerMutation) ClearExecutedAt() {
	m.executed_at = nil
	m.clearedFields[caseytrigger.FieldExecutedAt] = struct{}{}
}

// ExecutedAtCleared returns if the "executed_at" field was cleared in this mutation.
func (m *CaseyTriggerMutation) ExecutedAtCleared() bool {
	_, ok := m.clearedFields[caseytrigger.FieldExecutedAt]
	return ok
}

// ResetExecutedAt resets all changes to the "executed_at" field.
func (m *CaseyTriggerMutation) ResetExecutedAt() {
	m.executed_at = nil
	delete(m.clearedFields, caseytrigger.FieldExecutedAt)
}

// Where appends a list predicates to the CaseyTriggerMutation builder.
func (m *CaseyTriggerMutation) Where(ps ...predicate.CaseyTrigger) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CaseyTriggerMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CaseyTriggerMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CaseyTrigger, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CaseyTriggerMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CaseyTriggerMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CaseyTrigger).
func (m *CaseyTriggerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CaseyTriggerMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.executor != nil {
		fields = append(fields, caseytrigger.FieldExecutor)
	}
	if m.hostname != nil {
		fields = append(fields, caseytrigger.FieldHostname)
	}
	if m.command != nil {
		fields = append(fields, caseytrigger.FieldCommand)
	}
	if m.response != nil {
		fields = append(fields, caseytrigger.FieldResponse)
	}
	if m.executed_at != nil {
		fields = append(fields, caseytrigger.FieldExecutedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CaseyTriggerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case caseytrigger.FieldExecutor:
		return m.Executor()
	case caseytrigger.FieldHostname:
		return m.Hostname()
	case caseytrigger.FieldCommand:
		return m.Command()
	case caseytrigger.FieldResponse:
		return m.Response()
	case caseytrigger.FieldExecutedAt:
		return m.ExecutedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CaseyTriggerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case caseytrigger.FieldExecutor:
		return m.OldExecutor(ctx)
	case caseytrigger.FieldHostname:
		return m.OldHostname(ctx)
	case caseytrigger.FieldCommand:
		return m.OldCommand(ctx)
	case caseytrigger.FieldResponse:
		return m.OldResponse(ctx)
	case caseytrigger.FieldExecutedAt:
		return m.OldExecutedAt(ctx)
	}
	return nil, fmt.Errorf("unknown CaseyTrigger field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CaseyTriggerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case caseytrigger.FieldExecutor:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExecutor(v)
		return nil
	case caseytrigger.FieldHostname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHostname(v)
		return nil
	case caseytrigger.FieldCommand:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCommand(v)
		return nil
	case caseytrigger.FieldResponse:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResponse(v)
		return nil
	case caseytrigger.FieldExecutedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExecutedAt(v)
		return nil
	}
	return fmt.Errorf("unknown CaseyTrigger field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CaseyTriggerMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CaseyTriggerMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CaseyTriggerMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown CaseyTrigger numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CaseyTriggerMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(caseytrigger.FieldResponse) {
		fields = append(fields, caseytrigger.FieldResponse)
	}
	if m.FieldCleared(caseytrigger.FieldExecutedAt) {
		fields = append(fields, caseytrigger.FieldExecutedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CaseyTriggerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CaseyTriggerMutation) ClearField(name string) error {
	switch name {
	case caseytrigger.FieldResponse:
		m.ClearResponse()
		return nil
	case caseytrigger.FieldExecutedAt:
		m.ClearExecutedAt()
		return nil
	}
	return fmt.Errorf("unknown CaseyTrigger nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CaseyTriggerMutation) ResetField(name string) error {
	switch name {
	case caseytrigger.FieldExecutor:
		m.ResetExecutor()
		return nil
	case caseytrigger.FieldHostname:
		m.ResetHostname()
		return nil
	case caseytrigger.FieldCommand:
		m.ResetCommand()
		return nil
	case caseytrigger.FieldResponse:
		m.ResetResponse()
		return nil
	case caseytrigger.FieldExecutedAt:
		m.ResetExecutedAt()
		return nil
	}
	return fmt.Errorf("unknown CaseyTrigger field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CaseyTriggerMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CaseyTriggerMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CaseyTriggerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CaseyTriggerMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CaseyTriggerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CaseyTriggerMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CaseyTriggerMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CaseyTrigger unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CaseyTriggerMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CaseyTrigger edge %s", name)
}
