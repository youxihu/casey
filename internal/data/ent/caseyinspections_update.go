// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/youxihu/casey/internal/data/ent/caseyinspections"
	"github.com/youxihu/casey/internal/data/ent/predicate"
)

// CaseyInspectionsUpdate is the builder for updating CaseyInspections entities.
type CaseyInspectionsUpdate struct {
	config
	hooks     []Hook
	mutation  *CaseyInspectionsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CaseyInspectionsUpdate builder.
func (ciu *CaseyInspectionsUpdate) Where(ps ...predicate.CaseyInspections) *CaseyInspectionsUpdate {
	ciu.mutation.Where(ps...)
	return ciu
}

// SetTimestamp sets the "timestamp" field.
func (ciu *CaseyInspectionsUpdate) SetTimestamp(s string) *CaseyInspectionsUpdate {
	ciu.mutation.SetTimestamp(s)
	return ciu
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (ciu *CaseyInspectionsUpdate) SetNillableTimestamp(s *string) *CaseyInspectionsUpdate {
	if s != nil {
		ciu.SetTimestamp(*s)
	}
	return ciu
}

// SetHostname sets the "hostname" field.
func (ciu *CaseyInspectionsUpdate) SetHostname(s string) *CaseyInspectionsUpdate {
	ciu.mutation.SetHostname(s)
	return ciu
}

// SetNillableHostname sets the "hostname" field if the given value is not nil.
func (ciu *CaseyInspectionsUpdate) SetNillableHostname(s *string) *CaseyInspectionsUpdate {
	if s != nil {
		ciu.SetHostname(*s)
	}
	return ciu
}

// SetIP sets the "ip" field.
func (ciu *CaseyInspectionsUpdate) SetIP(s string) *CaseyInspectionsUpdate {
	ciu.mutation.SetIP(s)
	return ciu
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (ciu *CaseyInspectionsUpdate) SetNillableIP(s *string) *CaseyInspectionsUpdate {
	if s != nil {
		ciu.SetIP(*s)
	}
	return ciu
}

// SetOs sets the "os" field.
func (ciu *CaseyInspectionsUpdate) SetOs(s string) *CaseyInspectionsUpdate {
	ciu.mutation.SetOs(s)
	return ciu
}

// SetNillableOs sets the "os" field if the given value is not nil.
func (ciu *CaseyInspectionsUpdate) SetNillableOs(s *string) *CaseyInspectionsUpdate {
	if s != nil {
		ciu.SetOs(*s)
	}
	return ciu
}

// SetUptime sets the "uptime" field.
func (ciu *CaseyInspectionsUpdate) SetUptime(s string) *CaseyInspectionsUpdate {
	ciu.mutation.SetUptime(s)
	return ciu
}

// SetNillableUptime sets the "uptime" field if the given value is not nil.
func (ciu *CaseyInspectionsUpdate) SetNillableUptime(s *string) *CaseyInspectionsUpdate {
	if s != nil {
		ciu.SetUptime(*s)
	}
	return ciu
}

// SetCPU sets the "cpu" field.
func (ciu *CaseyInspectionsUpdate) SetCPU(s string) *CaseyInspectionsUpdate {
	ciu.mutation.SetCPU(s)
	return ciu
}

// SetNillableCPU sets the "cpu" field if the given value is not nil.
func (ciu *CaseyInspectionsUpdate) SetNillableCPU(s *string) *CaseyInspectionsUpdate {
	if s != nil {
		ciu.SetCPU(*s)
	}
	return ciu
}

// SetCPULoad sets the "cpu_load" field.
func (ciu *CaseyInspectionsUpdate) SetCPULoad(s string) *CaseyInspectionsUpdate {
	ciu.mutation.SetCPULoad(s)
	return ciu
}

// SetNillableCPULoad sets the "cpu_load" field if the given value is not nil.
func (ciu *CaseyInspectionsUpdate) SetNillableCPULoad(s *string) *CaseyInspectionsUpdate {
	if s != nil {
		ciu.SetCPULoad(*s)
	}
	return ciu
}

// SetMemory sets the "memory" field.
func (ciu *CaseyInspectionsUpdate) SetMemory(s string) *CaseyInspectionsUpdate {
	ciu.mutation.SetMemory(s)
	return ciu
}

// SetNillableMemory sets the "memory" field if the given value is not nil.
func (ciu *CaseyInspectionsUpdate) SetNillableMemory(s *string) *CaseyInspectionsUpdate {
	if s != nil {
		ciu.SetMemory(*s)
	}
	return ciu
}

// SetDisk sets the "disk" field.
func (ciu *CaseyInspectionsUpdate) SetDisk(s string) *CaseyInspectionsUpdate {
	ciu.mutation.SetDisk(s)
	return ciu
}

// SetNillableDisk sets the "disk" field if the given value is not nil.
func (ciu *CaseyInspectionsUpdate) SetNillableDisk(s *string) *CaseyInspectionsUpdate {
	if s != nil {
		ciu.SetDisk(*s)
	}
	return ciu
}

// SetDiskIo sets the "disk_io" field.
func (ciu *CaseyInspectionsUpdate) SetDiskIo(s string) *CaseyInspectionsUpdate {
	ciu.mutation.SetDiskIo(s)
	return ciu
}

// SetNillableDiskIo sets the "disk_io" field if the given value is not nil.
func (ciu *CaseyInspectionsUpdate) SetNillableDiskIo(s *string) *CaseyInspectionsUpdate {
	if s != nil {
		ciu.SetDiskIo(*s)
	}
	return ciu
}

// SetRouter sets the "router" field.
func (ciu *CaseyInspectionsUpdate) SetRouter(s string) *CaseyInspectionsUpdate {
	ciu.mutation.SetRouter(s)
	return ciu
}

// SetNillableRouter sets the "router" field if the given value is not nil.
func (ciu *CaseyInspectionsUpdate) SetNillableRouter(s *string) *CaseyInspectionsUpdate {
	if s != nil {
		ciu.SetRouter(*s)
	}
	return ciu
}

// SetNetStats sets the "net_stats" field.
func (ciu *CaseyInspectionsUpdate) SetNetStats(s string) *CaseyInspectionsUpdate {
	ciu.mutation.SetNetStats(s)
	return ciu
}

// SetNillableNetStats sets the "net_stats" field if the given value is not nil.
func (ciu *CaseyInspectionsUpdate) SetNillableNetStats(s *string) *CaseyInspectionsUpdate {
	if s != nil {
		ciu.SetNetStats(*s)
	}
	return ciu
}

// SetProcesses sets the "processes" field.
func (ciu *CaseyInspectionsUpdate) SetProcesses(i int32) *CaseyInspectionsUpdate {
	ciu.mutation.ResetProcesses()
	ciu.mutation.SetProcesses(i)
	return ciu
}

// SetNillableProcesses sets the "processes" field if the given value is not nil.
func (ciu *CaseyInspectionsUpdate) SetNillableProcesses(i *int32) *CaseyInspectionsUpdate {
	if i != nil {
		ciu.SetProcesses(*i)
	}
	return ciu
}

// AddProcesses adds i to the "processes" field.
func (ciu *CaseyInspectionsUpdate) AddProcesses(i int32) *CaseyInspectionsUpdate {
	ciu.mutation.AddProcesses(i)
	return ciu
}

// SetZombieProcs sets the "zombie_procs" field.
func (ciu *CaseyInspectionsUpdate) SetZombieProcs(i int32) *CaseyInspectionsUpdate {
	ciu.mutation.ResetZombieProcs()
	ciu.mutation.SetZombieProcs(i)
	return ciu
}

// SetNillableZombieProcs sets the "zombie_procs" field if the given value is not nil.
func (ciu *CaseyInspectionsUpdate) SetNillableZombieProcs(i *int32) *CaseyInspectionsUpdate {
	if i != nil {
		ciu.SetZombieProcs(*i)
	}
	return ciu
}

// AddZombieProcs adds i to the "zombie_procs" field.
func (ciu *CaseyInspectionsUpdate) AddZombieProcs(i int32) *CaseyInspectionsUpdate {
	ciu.mutation.AddZombieProcs(i)
	return ciu
}

// SetTopProcesses sets the "top_processes" field.
func (ciu *CaseyInspectionsUpdate) SetTopProcesses(s string) *CaseyInspectionsUpdate {
	ciu.mutation.SetTopProcesses(s)
	return ciu
}

// SetNillableTopProcesses sets the "top_processes" field if the given value is not nil.
func (ciu *CaseyInspectionsUpdate) SetNillableTopProcesses(s *string) *CaseyInspectionsUpdate {
	if s != nil {
		ciu.SetTopProcesses(*s)
	}
	return ciu
}

// SetEnv sets the "env" field.
func (ciu *CaseyInspectionsUpdate) SetEnv(s string) *CaseyInspectionsUpdate {
	ciu.mutation.SetEnv(s)
	return ciu
}

// SetNillableEnv sets the "env" field if the given value is not nil.
func (ciu *CaseyInspectionsUpdate) SetNillableEnv(s *string) *CaseyInspectionsUpdate {
	if s != nil {
		ciu.SetEnv(*s)
	}
	return ciu
}

// ClearEnv clears the value of the "env" field.
func (ciu *CaseyInspectionsUpdate) ClearEnv() *CaseyInspectionsUpdate {
	ciu.mutation.ClearEnv()
	return ciu
}

// SetCreatedAt sets the "created_at" field.
func (ciu *CaseyInspectionsUpdate) SetCreatedAt(t time.Time) *CaseyInspectionsUpdate {
	ciu.mutation.SetCreatedAt(t)
	return ciu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ciu *CaseyInspectionsUpdate) SetNillableCreatedAt(t *time.Time) *CaseyInspectionsUpdate {
	if t != nil {
		ciu.SetCreatedAt(*t)
	}
	return ciu
}

// Mutation returns the CaseyInspectionsMutation object of the builder.
func (ciu *CaseyInspectionsUpdate) Mutation() *CaseyInspectionsMutation {
	return ciu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ciu *CaseyInspectionsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ciu.sqlSave, ciu.mutation, ciu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ciu *CaseyInspectionsUpdate) SaveX(ctx context.Context) int {
	affected, err := ciu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ciu *CaseyInspectionsUpdate) Exec(ctx context.Context) error {
	_, err := ciu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ciu *CaseyInspectionsUpdate) ExecX(ctx context.Context) {
	if err := ciu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ciu *CaseyInspectionsUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CaseyInspectionsUpdate {
	ciu.modifiers = append(ciu.modifiers, modifiers...)
	return ciu
}

func (ciu *CaseyInspectionsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(caseyinspections.Table, caseyinspections.Columns, sqlgraph.NewFieldSpec(caseyinspections.FieldID, field.TypeInt64))
	if ps := ciu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ciu.mutation.Timestamp(); ok {
		_spec.SetField(caseyinspections.FieldTimestamp, field.TypeString, value)
	}
	if value, ok := ciu.mutation.Hostname(); ok {
		_spec.SetField(caseyinspections.FieldHostname, field.TypeString, value)
	}
	if value, ok := ciu.mutation.IP(); ok {
		_spec.SetField(caseyinspections.FieldIP, field.TypeString, value)
	}
	if value, ok := ciu.mutation.Os(); ok {
		_spec.SetField(caseyinspections.FieldOs, field.TypeString, value)
	}
	if value, ok := ciu.mutation.Uptime(); ok {
		_spec.SetField(caseyinspections.FieldUptime, field.TypeString, value)
	}
	if value, ok := ciu.mutation.CPU(); ok {
		_spec.SetField(caseyinspections.FieldCPU, field.TypeString, value)
	}
	if value, ok := ciu.mutation.CPULoad(); ok {
		_spec.SetField(caseyinspections.FieldCPULoad, field.TypeString, value)
	}
	if value, ok := ciu.mutation.Memory(); ok {
		_spec.SetField(caseyinspections.FieldMemory, field.TypeString, value)
	}
	if value, ok := ciu.mutation.Disk(); ok {
		_spec.SetField(caseyinspections.FieldDisk, field.TypeString, value)
	}
	if value, ok := ciu.mutation.DiskIo(); ok {
		_spec.SetField(caseyinspections.FieldDiskIo, field.TypeString, value)
	}
	if value, ok := ciu.mutation.Router(); ok {
		_spec.SetField(caseyinspections.FieldRouter, field.TypeString, value)
	}
	if value, ok := ciu.mutation.NetStats(); ok {
		_spec.SetField(caseyinspections.FieldNetStats, field.TypeString, value)
	}
	if value, ok := ciu.mutation.Processes(); ok {
		_spec.SetField(caseyinspections.FieldProcesses, field.TypeInt32, value)
	}
	if value, ok := ciu.mutation.AddedProcesses(); ok {
		_spec.AddField(caseyinspections.FieldProcesses, field.TypeInt32, value)
	}
	if value, ok := ciu.mutation.ZombieProcs(); ok {
		_spec.SetField(caseyinspections.FieldZombieProcs, field.TypeInt32, value)
	}
	if value, ok := ciu.mutation.AddedZombieProcs(); ok {
		_spec.AddField(caseyinspections.FieldZombieProcs, field.TypeInt32, value)
	}
	if value, ok := ciu.mutation.TopProcesses(); ok {
		_spec.SetField(caseyinspections.FieldTopProcesses, field.TypeString, value)
	}
	if value, ok := ciu.mutation.Env(); ok {
		_spec.SetField(caseyinspections.FieldEnv, field.TypeString, value)
	}
	if ciu.mutation.EnvCleared() {
		_spec.ClearField(caseyinspections.FieldEnv, field.TypeString)
	}
	if value, ok := ciu.mutation.CreatedAt(); ok {
		_spec.SetField(caseyinspections.FieldCreatedAt, field.TypeTime, value)
	}
	_spec.AddModifiers(ciu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ciu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{caseyinspections.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ciu.mutation.done = true
	return n, nil
}

// CaseyInspectionsUpdateOne is the builder for updating a single CaseyInspections entity.
type CaseyInspectionsUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CaseyInspectionsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetTimestamp sets the "timestamp" field.
func (ciuo *CaseyInspectionsUpdateOne) SetTimestamp(s string) *CaseyInspectionsUpdateOne {
	ciuo.mutation.SetTimestamp(s)
	return ciuo
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (ciuo *CaseyInspectionsUpdateOne) SetNillableTimestamp(s *string) *CaseyInspectionsUpdateOne {
	if s != nil {
		ciuo.SetTimestamp(*s)
	}
	return ciuo
}

// SetHostname sets the "hostname" field.
func (ciuo *CaseyInspectionsUpdateOne) SetHostname(s string) *CaseyInspectionsUpdateOne {
	ciuo.mutation.SetHostname(s)
	return ciuo
}

// SetNillableHostname sets the "hostname" field if the given value is not nil.
func (ciuo *CaseyInspectionsUpdateOne) SetNillableHostname(s *string) *CaseyInspectionsUpdateOne {
	if s != nil {
		ciuo.SetHostname(*s)
	}
	return ciuo
}

// SetIP sets the "ip" field.
func (ciuo *CaseyInspectionsUpdateOne) SetIP(s string) *CaseyInspectionsUpdateOne {
	ciuo.mutation.SetIP(s)
	return ciuo
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (ciuo *CaseyInspectionsUpdateOne) SetNillableIP(s *string) *CaseyInspectionsUpdateOne {
	if s != nil {
		ciuo.SetIP(*s)
	}
	return ciuo
}

// SetOs sets the "os" field.
func (ciuo *CaseyInspectionsUpdateOne) SetOs(s string) *CaseyInspectionsUpdateOne {
	ciuo.mutation.SetOs(s)
	return ciuo
}

// SetNillableOs sets the "os" field if the given value is not nil.
func (ciuo *CaseyInspectionsUpdateOne) SetNillableOs(s *string) *CaseyInspectionsUpdateOne {
	if s != nil {
		ciuo.SetOs(*s)
	}
	return ciuo
}

// SetUptime sets the "uptime" field.
func (ciuo *CaseyInspectionsUpdateOne) SetUptime(s string) *CaseyInspectionsUpdateOne {
	ciuo.mutation.SetUptime(s)
	return ciuo
}

// SetNillableUptime sets the "uptime" field if the given value is not nil.
func (ciuo *CaseyInspectionsUpdateOne) SetNillableUptime(s *string) *CaseyInspectionsUpdateOne {
	if s != nil {
		ciuo.SetUptime(*s)
	}
	return ciuo
}

// SetCPU sets the "cpu" field.
func (ciuo *CaseyInspectionsUpdateOne) SetCPU(s string) *CaseyInspectionsUpdateOne {
	ciuo.mutation.SetCPU(s)
	return ciuo
}

// SetNillableCPU sets the "cpu" field if the given value is not nil.
func (ciuo *CaseyInspectionsUpdateOne) SetNillableCPU(s *string) *CaseyInspectionsUpdateOne {
	if s != nil {
		ciuo.SetCPU(*s)
	}
	return ciuo
}

// SetCPULoad sets the "cpu_load" field.
func (ciuo *CaseyInspectionsUpdateOne) SetCPULoad(s string) *CaseyInspectionsUpdateOne {
	ciuo.mutation.SetCPULoad(s)
	return ciuo
}

// SetNillableCPULoad sets the "cpu_load" field if the given value is not nil.
func (ciuo *CaseyInspectionsUpdateOne) SetNillableCPULoad(s *string) *CaseyInspectionsUpdateOne {
	if s != nil {
		ciuo.SetCPULoad(*s)
	}
	return ciuo
}

// SetMemory sets the "memory" field.
func (ciuo *CaseyInspectionsUpdateOne) SetMemory(s string) *CaseyInspectionsUpdateOne {
	ciuo.mutation.SetMemory(s)
	return ciuo
}

// SetNillableMemory sets the "memory" field if the given value is not nil.
func (ciuo *CaseyInspectionsUpdateOne) SetNillableMemory(s *string) *CaseyInspectionsUpdateOne {
	if s != nil {
		ciuo.SetMemory(*s)
	}
	return ciuo
}

// SetDisk sets the "disk" field.
func (ciuo *CaseyInspectionsUpdateOne) SetDisk(s string) *CaseyInspectionsUpdateOne {
	ciuo.mutation.SetDisk(s)
	return ciuo
}

// SetNillableDisk sets the "disk" field if the given value is not nil.
func (ciuo *CaseyInspectionsUpdateOne) SetNillableDisk(s *string) *CaseyInspectionsUpdateOne {
	if s != nil {
		ciuo.SetDisk(*s)
	}
	return ciuo
}

// SetDiskIo sets the "disk_io" field.
func (ciuo *CaseyInspectionsUpdateOne) SetDiskIo(s string) *CaseyInspectionsUpdateOne {
	ciuo.mutation.SetDiskIo(s)
	return ciuo
}

// SetNillableDiskIo sets the "disk_io" field if the given value is not nil.
func (ciuo *CaseyInspectionsUpdateOne) SetNillableDiskIo(s *string) *CaseyInspectionsUpdateOne {
	if s != nil {
		ciuo.SetDiskIo(*s)
	}
	return ciuo
}

// SetRouter sets the "router" field.
func (ciuo *CaseyInspectionsUpdateOne) SetRouter(s string) *CaseyInspectionsUpdateOne {
	ciuo.mutation.SetRouter(s)
	return ciuo
}

// SetNillableRouter sets the "router" field if the given value is not nil.
func (ciuo *CaseyInspectionsUpdateOne) SetNillableRouter(s *string) *CaseyInspectionsUpdateOne {
	if s != nil {
		ciuo.SetRouter(*s)
	}
	return ciuo
}

// SetNetStats sets the "net_stats" field.
func (ciuo *CaseyInspectionsUpdateOne) SetNetStats(s string) *CaseyInspectionsUpdateOne {
	ciuo.mutation.SetNetStats(s)
	return ciuo
}

// SetNillableNetStats sets the "net_stats" field if the given value is not nil.
func (ciuo *CaseyInspectionsUpdateOne) SetNillableNetStats(s *string) *CaseyInspectionsUpdateOne {
	if s != nil {
		ciuo.SetNetStats(*s)
	}
	return ciuo
}

// SetProcesses sets the "processes" field.
func (ciuo *CaseyInspectionsUpdateOne) SetProcesses(i int32) *CaseyInspectionsUpdateOne {
	ciuo.mutation.ResetProcesses()
	ciuo.mutation.SetProcesses(i)
	return ciuo
}

// SetNillableProcesses sets the "processes" field if the given value is not nil.
func (ciuo *CaseyInspectionsUpdateOne) SetNillableProcesses(i *int32) *CaseyInspectionsUpdateOne {
	if i != nil {
		ciuo.SetProcesses(*i)
	}
	return ciuo
}

// AddProcesses adds i to the "processes" field.
func (ciuo *CaseyInspectionsUpdateOne) AddProcesses(i int32) *CaseyInspectionsUpdateOne {
	ciuo.mutation.AddProcesses(i)
	return ciuo
}

// SetZombieProcs sets the "zombie_procs" field.
func (ciuo *CaseyInspectionsUpdateOne) SetZombieProcs(i int32) *CaseyInspectionsUpdateOne {
	ciuo.mutation.ResetZombieProcs()
	ciuo.mutation.SetZombieProcs(i)
	return ciuo
}

// SetNillableZombieProcs sets the "zombie_procs" field if the given value is not nil.
func (ciuo *CaseyInspectionsUpdateOne) SetNillableZombieProcs(i *int32) *CaseyInspectionsUpdateOne {
	if i != nil {
		ciuo.SetZombieProcs(*i)
	}
	return ciuo
}

// AddZombieProcs adds i to the "zombie_procs" field.
func (ciuo *CaseyInspectionsUpdateOne) AddZombieProcs(i int32) *CaseyInspectionsUpdateOne {
	ciuo.mutation.AddZombieProcs(i)
	return ciuo
}

// SetTopProcesses sets the "top_processes" field.
func (ciuo *CaseyInspectionsUpdateOne) SetTopProcesses(s string) *CaseyInspectionsUpdateOne {
	ciuo.mutation.SetTopProcesses(s)
	return ciuo
}

// SetNillableTopProcesses sets the "top_processes" field if the given value is not nil.
func (ciuo *CaseyInspectionsUpdateOne) SetNillableTopProcesses(s *string) *CaseyInspectionsUpdateOne {
	if s != nil {
		ciuo.SetTopProcesses(*s)
	}
	return ciuo
}

// SetEnv sets the "env" field.
func (ciuo *CaseyInspectionsUpdateOne) SetEnv(s string) *CaseyInspectionsUpdateOne {
	ciuo.mutation.SetEnv(s)
	return ciuo
}

// SetNillableEnv sets the "env" field if the given value is not nil.
func (ciuo *CaseyInspectionsUpdateOne) SetNillableEnv(s *string) *CaseyInspectionsUpdateOne {
	if s != nil {
		ciuo.SetEnv(*s)
	}
	return ciuo
}

// ClearEnv clears the value of the "env" field.
func (ciuo *CaseyInspectionsUpdateOne) ClearEnv() *CaseyInspectionsUpdateOne {
	ciuo.mutation.ClearEnv()
	return ciuo
}

// SetCreatedAt sets the "created_at" field.
func (ciuo *CaseyInspectionsUpdateOne) SetCreatedAt(t time.Time) *CaseyInspectionsUpdateOne {
	ciuo.mutation.SetCreatedAt(t)
	return ciuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ciuo *CaseyInspectionsUpdateOne) SetNillableCreatedAt(t *time.Time) *CaseyInspectionsUpdateOne {
	if t != nil {
		ciuo.SetCreatedAt(*t)
	}
	return ciuo
}

// Mutation returns the CaseyInspectionsMutation object of the builder.
func (ciuo *CaseyInspectionsUpdateOne) Mutation() *CaseyInspectionsMutation {
	return ciuo.mutation
}

// Where appends a list predicates to the CaseyInspectionsUpdate builder.
func (ciuo *CaseyInspectionsUpdateOne) Where(ps ...predicate.CaseyInspections) *CaseyInspectionsUpdateOne {
	ciuo.mutation.Where(ps...)
	return ciuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ciuo *CaseyInspectionsUpdateOne) Select(field string, fields ...string) *CaseyInspectionsUpdateOne {
	ciuo.fields = append([]string{field}, fields...)
	return ciuo
}

// Save executes the query and returns the updated CaseyInspections entity.
func (ciuo *CaseyInspectionsUpdateOne) Save(ctx context.Context) (*CaseyInspections, error) {
	return withHooks(ctx, ciuo.sqlSave, ciuo.mutation, ciuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ciuo *CaseyInspectionsUpdateOne) SaveX(ctx context.Context) *CaseyInspections {
	node, err := ciuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ciuo *CaseyInspectionsUpdateOne) Exec(ctx context.Context) error {
	_, err := ciuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ciuo *CaseyInspectionsUpdateOne) ExecX(ctx context.Context) {
	if err := ciuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ciuo *CaseyInspectionsUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CaseyInspectionsUpdateOne {
	ciuo.modifiers = append(ciuo.modifiers, modifiers...)
	return ciuo
}

func (ciuo *CaseyInspectionsUpdateOne) sqlSave(ctx context.Context) (_node *CaseyInspections, err error) {
	_spec := sqlgraph.NewUpdateSpec(caseyinspections.Table, caseyinspections.Columns, sqlgraph.NewFieldSpec(caseyinspections.FieldID, field.TypeInt64))
	id, ok := ciuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CaseyInspections.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ciuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, caseyinspections.FieldID)
		for _, f := range fields {
			if !caseyinspections.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != caseyinspections.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ciuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ciuo.mutation.Timestamp(); ok {
		_spec.SetField(caseyinspections.FieldTimestamp, field.TypeString, value)
	}
	if value, ok := ciuo.mutation.Hostname(); ok {
		_spec.SetField(caseyinspections.FieldHostname, field.TypeString, value)
	}
	if value, ok := ciuo.mutation.IP(); ok {
		_spec.SetField(caseyinspections.FieldIP, field.TypeString, value)
	}
	if value, ok := ciuo.mutation.Os(); ok {
		_spec.SetField(caseyinspections.FieldOs, field.TypeString, value)
	}
	if value, ok := ciuo.mutation.Uptime(); ok {
		_spec.SetField(caseyinspections.FieldUptime, field.TypeString, value)
	}
	if value, ok := ciuo.mutation.CPU(); ok {
		_spec.SetField(caseyinspections.FieldCPU, field.TypeString, value)
	}
	if value, ok := ciuo.mutation.CPULoad(); ok {
		_spec.SetField(caseyinspections.FieldCPULoad, field.TypeString, value)
	}
	if value, ok := ciuo.mutation.Memory(); ok {
		_spec.SetField(caseyinspections.FieldMemory, field.TypeString, value)
	}
	if value, ok := ciuo.mutation.Disk(); ok {
		_spec.SetField(caseyinspections.FieldDisk, field.TypeString, value)
	}
	if value, ok := ciuo.mutation.DiskIo(); ok {
		_spec.SetField(caseyinspections.FieldDiskIo, field.TypeString, value)
	}
	if value, ok := ciuo.mutation.Router(); ok {
		_spec.SetField(caseyinspections.FieldRouter, field.TypeString, value)
	}
	if value, ok := ciuo.mutation.NetStats(); ok {
		_spec.SetField(caseyinspections.FieldNetStats, field.TypeString, value)
	}
	if value, ok := ciuo.mutation.Processes(); ok {
		_spec.SetField(caseyinspections.FieldProcesses, field.TypeInt32, value)
	}
	if value, ok := ciuo.mutation.AddedProcesses(); ok {
		_spec.AddField(caseyinspections.FieldProcesses, field.TypeInt32, value)
	}
	if value, ok := ciuo.mutation.ZombieProcs(); ok {
		_spec.SetField(caseyinspections.FieldZombieProcs, field.TypeInt32, value)
	}
	if value, ok := ciuo.mutation.AddedZombieProcs(); ok {
		_spec.AddField(caseyinspections.FieldZombieProcs, field.TypeInt32, value)
	}
	if value, ok := ciuo.mutation.TopProcesses(); ok {
		_spec.SetField(caseyinspections.FieldTopProcesses, field.TypeString, value)
	}
	if value, ok := ciuo.mutation.Env(); ok {
		_spec.SetField(caseyinspections.FieldEnv, field.TypeString, value)
	}
	if ciuo.mutation.EnvCleared() {
		_spec.ClearField(caseyinspections.FieldEnv, field.TypeString)
	}
	if value, ok := ciuo.mutation.CreatedAt(); ok {
		_spec.SetField(caseyinspections.FieldCreatedAt, field.TypeTime, value)
	}
	_spec.AddModifiers(ciuo.modifiers...)
	_node = &CaseyInspections{config: ciuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ciuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{caseyinspections.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ciuo.mutation.done = true
	return _node, nil
}
